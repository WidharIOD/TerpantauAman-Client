{"ast":null,"code":"var _jsxFileName = \"/Users/widhardwiatmoko/Desktop/TerpantauAman/realtime-client/src/components/section1.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n// import image1 from './path/to/your/image1.jpg'; // Replace with your image path\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Section1 = ({\n  onDimensionChange\n}) => {\n  _s();\n  const [selectedDimensions, setSelectedDimensions] = useState([]);\n  const [customDimension, setCustomDimension] = useState(\"\");\n  const {\n    dimensions,\n    isEditing\n  } = location.state || {}; // Get data and isEditing flag\n\n  // State to track selected options using checkboxes\n  const [selectedOptions, setSelectedOptions] = useState({\n    event_name: false,\n    platform: false,\n    city: false,\n    pagePath: false,\n    channelGroup: false,\n    sessionSourceMedium: false,\n    customDimensions: false\n  });\n  const navigate = useNavigate();\n  useEffect(() => {\n    // If editing, pre-populate selectedOptions based on dimensions from reportData\n    if (isEditing && dimensions) {\n      const initialOptions = {};\n      Object.keys(selectedOptions).forEach(option => {\n        initialOptions[option] = dimensions.includes(option);\n      });\n      setSelectedOptions(initialOptions);\n    }\n  }, [isEditing, dimensions]);\n\n  // Function to handle checkbox changes\n  const handleCheckboxChange = option => {\n    // Update the state, toggling the selected option\n    setSelectedOptions({\n      ...selectedOptions,\n      // Copy existing options\n      [option]: !selectedOptions[option] // Toggle the specific option\n    });\n  };\n\n  // Function to handle form submission\n  const handleSubmit = () => {\n    // Get an array of selected dimension names (where the value is true)\n    const selected = Object.keys(selectedOptions).filter(option => selectedOptions[option]);\n\n    // Validation: Check if the selection count is within the valid range\n    if (selected.length === 0 || selected.length > 3) {\n      alert(\"Please select 1 to 3 options.\"); // Show an alert if invalid\n    } else {\n      // Navigate to the next section, passing the selected dimensions as an array\n      navigate(\"/section2\", {\n        state: {\n          dimensions: selected\n        }\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Dimensions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"You can choose from the following options, with a maximum of 3 options:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: selectedOptions.event_name,\n          onChange: () => handleCheckboxChange(\"event_name\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this), \" \", \"Event Name\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: selectedOptions.platform,\n          onChange: () => handleCheckboxChange(\"platform\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this), \" \", \"Platform\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: selectedOptions.city,\n          onChange: () => handleCheckboxChange(\"city\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this), \" \", \"City\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: selectedOptions.pagePath,\n          onChange: () => handleCheckboxChange(\"pagePath\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this), \" \", \"Page Path\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: selectedOptions.channelGroup,\n          onChange: () => handleCheckboxChange(\"channelGroup\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this), \" \", \"Channel Group\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: selectedOptions.sessionSourceMedium,\n          onChange: () => handleCheckboxChange(\"sessionSourceMedium\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }, this), \" \", \"Session Source/Medium\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSubmit,\n      children: \"Next\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n_s(Section1, \"+FS7mM6QCxkvqjIruf09tHwU8LA=\", false, function () {\n  return [useNavigate];\n});\n_c = Section1;\nexport default Section1;\nvar _c;\n$RefreshReg$(_c, \"Section1\");","map":{"version":3,"names":["React","useState","useNavigate","jsxDEV","_jsxDEV","Section1","onDimensionChange","_s","selectedDimensions","setSelectedDimensions","customDimension","setCustomDimension","dimensions","isEditing","location","state","selectedOptions","setSelectedOptions","event_name","platform","city","pagePath","channelGroup","sessionSourceMedium","customDimensions","navigate","useEffect","initialOptions","Object","keys","forEach","option","includes","handleCheckboxChange","handleSubmit","selected","filter","length","alert","children","fileName","_jsxFileName","lineNumber","columnNumber","type","checked","onChange","onClick","_c","$RefreshReg$"],"sources":["/Users/widhardwiatmoko/Desktop/TerpantauAman/realtime-client/src/components/section1.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n// import image1 from './path/to/your/image1.jpg'; // Replace with your image path\n\nconst Section1 = ({ onDimensionChange }) => {\n  const [selectedDimensions, setSelectedDimensions] = useState([]);\n  const [customDimension, setCustomDimension] = useState(\"\");\n  const { dimensions, isEditing } = location.state || {}; // Get data and isEditing flag\n\n  // State to track selected options using checkboxes\n  const [selectedOptions, setSelectedOptions] = useState({\n    event_name: false,\n    platform: false,\n    city: false,\n    pagePath: false,\n    channelGroup: false,\n    sessionSourceMedium: false,\n    customDimensions: false,\n  });\n\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    // If editing, pre-populate selectedOptions based on dimensions from reportData\n    if (isEditing && dimensions) {\n      const initialOptions = {};\n      Object.keys(selectedOptions).forEach((option) => {\n        initialOptions[option] = dimensions.includes(option);\n      });\n      setSelectedOptions(initialOptions);\n    }\n  }, [isEditing, dimensions]);\n\n  // Function to handle checkbox changes\n  const handleCheckboxChange = (option) => {\n    // Update the state, toggling the selected option\n    setSelectedOptions({\n      ...selectedOptions, // Copy existing options\n      [option]: !selectedOptions[option], // Toggle the specific option\n    });\n  };\n\n  // Function to handle form submission\n  const handleSubmit = () => {\n    // Get an array of selected dimension names (where the value is true)\n    const selected = Object.keys(selectedOptions).filter(\n      (option) => selectedOptions[option]\n    );\n\n    // Validation: Check if the selection count is within the valid range\n    if (selected.length === 0 || selected.length > 3) {\n      alert(\"Please select 1 to 3 options.\"); // Show an alert if invalid\n    } else {\n      // Navigate to the next section, passing the selected dimensions as an array\n      navigate(\"/section2\", { state: { dimensions: selected } });\n    }\n  };\n\n  return (\n    <div>\n      <h1>Dimensions</h1>\n      <p>\n        You can choose from the following options, with a maximum of 3 options:\n      </p>\n\n      {/* <img src={image1} alt=\"Image 1\" />  */}\n\n      {/* Checkboxes for dimensions */}\n      <div>\n        <label>\n          <input\n            type=\"checkbox\"\n            checked={selectedOptions.event_name}\n            onChange={() => handleCheckboxChange(\"event_name\")}\n          />{\" \"}\n          Event Name\n        </label>\n      </div>\n      <div>\n        {\" \"}\n        {/* Repeat this structure for each dimension */}\n        <label>\n          <input\n            type=\"checkbox\"\n            checked={selectedOptions.platform}\n            onChange={() => handleCheckboxChange(\"platform\")}\n          />{\" \"}\n          Platform\n        </label>\n      </div>\n      <div>\n        {\" \"}\n        {/* Repeat this structure for each dimension */}\n        <label>\n          <input\n            type=\"checkbox\"\n            checked={selectedOptions.city}\n            onChange={() => handleCheckboxChange(\"city\")}\n          />{\" \"}\n          City\n        </label>\n      </div>\n      <div>\n        {\" \"}\n        {/* Repeat this structure for each dimension */}\n        <label>\n          <input\n            type=\"checkbox\"\n            checked={selectedOptions.pagePath}\n            onChange={() => handleCheckboxChange(\"pagePath\")}\n          />{\" \"}\n          Page Path\n        </label>\n      </div>\n      <div>\n        {\" \"}\n        {/* Repeat this structure for each dimension */}\n        <label>\n          <input\n            type=\"checkbox\"\n            checked={selectedOptions.channelGroup}\n            onChange={() => handleCheckboxChange(\"channelGroup\")}\n          />{\" \"}\n          Channel Group\n        </label>\n      </div>\n      <div>\n        {\" \"}\n        {/* Repeat this structure for each dimension */}\n        <label>\n          <input\n            type=\"checkbox\"\n            checked={selectedOptions.sessionSourceMedium}\n            onChange={() => handleCheckboxChange(\"sessionSourceMedium\")}\n          />{\" \"}\n          Session Source/Medium\n        </label>\n      </div>\n\n      {/* ...add checkboxes for other dimensions (city, pagePath, etc.) ... */}\n\n      {/* Submit button */}\n      <button onClick={handleSubmit}>Next</button>\n    </div>\n  );\n};\n\nexport default Section1;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}