{"ast":null,"code":"var _jsxFileName = \"/Users/widhardwiatmoko/Desktop/TerpantauAman/realtime-client/src/components/ConfirmationPage.js\",\n  _s = $RefreshSig$();\n// import React from \"react\";\n// import { useLocation, useNavigate } from \"react-router-dom\";\n\n// const ConfirmationPage = () => {\n//   const location = useLocation();\n//   const { dimensions, metric, refreshTime, reportName } = location.state;\n//   const navigate = useNavigate();\n\n//   const handleSubmit = () => {\n//     // Pass all data to the FinalPage\n//     navigate(\"/final\", { state: location.state });\n//   };\n\n//   //   const handleSubmit = async () => {\n//   //     try {\n//   //       // Send data to backend to be saved to GCS\n//   //       const response = await fetch(\"http://localhost:3001/save-to-gcs\", {\n//   //         method: \"POST\",\n//   //         headers: { \"Content-Type\": \"application/json\" },\n//   //         body: JSON.stringify(location.state),\n//   //       });\n\n//   //       const data = await response.json();\n//   //       console.log(data); // Log the response from the server (optional)\n\n//   //       // After saving, you can navigate to the FinalPage or elsewhere\n//   //       navigate(\"/final\", { state: location.state });\n//   //     } catch (error) {\n//   //       console.error(\"Error saving data:\", error);\n//   //       // Handle the error (e.g., display an error message to the user)\n//   //     }\n//   //   };\n\n//   return (\n//     <div>\n//       <h1>Confirm Your Selections</h1>\n//       <h2>Dimensions:</h2>\n//       <ul>\n//         {dimensions.map((value, index) => (\n//           <li key={index}>{value}</li>\n//         ))}\n//       </ul>\n//       <p>Metric: {metric}</p>\n//       <p>Refresh Time: {refreshTime}</p>\n//       <p>User Name: {reportName}</p>\n//       <button onClick={handleSubmit}>Proceed to Results</button>\n//     </div>\n//   );\n// };\n\n// export default ConfirmationPage;\n\n// import React, { useEffect, useState } from \"react\";\n// import { useLocation, useNavigate } from \"react-router-dom\";\n\n// const ConfirmationPage = () => {\n//   const navigate = useNavigate();\n//   const location = useLocation();\n\n//   const [fileList, setFileList] = useState([]); // State to store the file list\n\n//   useEffect(() => {\n//     // Fetch the file list when the component mounts\n//     const fetchFileList = async () => {\n//       try {\n//         const response = await fetch(\"http://localhost:3001/list-files\");\n//         const data = await response.json();\n//         setFileList(data.files); // Assuming the backend returns an array named 'files'\n//       } catch (error) {\n//         console.error(\"Error fetching file list:\", error);\n//         // Handle error (e.g., display an error message)\n//       }\n//     };\n\n//     fetchFileList();\n//   }, []); // Empty dependency array ensures this runs only once\n//   const handleFileClick = async (fileName) => {\n//     try {\n//       const response = await fetch(\n//         `http://localhost:3001/get-file/${fileName}`\n//       );\n//       const fileData = await response.json();\n//       navigate(\"/final\", { state: fileData }); // Pass the file data to FinalPage\n//     } catch (error) {\n//       console.error(\"Error fetching file data:\", error);\n//       // Handle error\n//     }\n//   };\n\n//   const handleSubmit = () => {\n//     navigate(\"/final\", { state: location.state });\n//   };\n\n//   return (\n//     <div>\n//       <h1>List of Files in Cloud Storage</h1>\n\n//       {fileList.length > 0 ? (\n//         <table>\n//           <thead>\n//             <tr>\n//               <th>Filename</th>\n//               <th>Date Created</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {fileList.map((file, index) => (\n//               <tr\n//                 key={index}\n//                 onClick={() => handleFileClick(file.name)}\n//                 style={{ cursor: \"pointer\" }}\n//               >\n//                 <td>{file.name.replace(\".json\", \"\")}</td>{\" \"}\n//                 {/* Remove .json extension */}\n//                 <td>{new Date(file.timeCreated).toLocaleString()}</td>{\" \"}\n//                 {/* Format timestamp */}\n//               </tr>\n//             ))}\n//           </tbody>\n//         </table>\n//       ) : (\n//         <p>No files found.</p>\n//       )}\n\n//       {/* ... (rest of your confirmation page content) ... */}\n//     </div>\n//   );\n// };\n// export default ConfirmationPage;\n\nimport React, { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { collection, getDocs, deleteDoc, doc } from \"firebase/firestore\";\nimport db from \"../firebaseConfig\"; // Assuming you have a firebase.js file for configuration\nimport { EditOutlined } from \"@ant-design/icons\"; // Import the Edit icon\nimport \"../style/ConfirmationPage.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConfirmationPage = () => {\n  _s();\n  const navigate = useNavigate();\n  const [reportList, setReportList] = useState([]);\n  const [selectedReports, setSelectedReports] = useState([]); // Track selected reports\n  const [selectAll, setSelectAll] = useState(false); // State for \"Select All\" checkbox\n\n  useEffect(() => {\n    const fetchReports = async () => {\n      try {\n        const querySnapshot = await getDocs(collection(db, \"Live Report\"));\n        const reports = [];\n        querySnapshot.forEach(doc => {\n          const data = doc.data();\n          reports.push({\n            id: doc.id,\n            // Include the document ID\n            reportName: data.reportName,\n            timestamp: data.timestamp,\n            dateLastRun: data.dateLastRun\n          });\n        });\n        setReportList(reports);\n      } catch (error) {\n        console.error(\"Error fetching reports from Firestore:\", error);\n        // Handle error (e.g., display an error message)\n      }\n    };\n    fetchReports();\n  }, [selectedReports]);\n  const handleReportClick = reportData => {\n    navigate(\"/final\", {\n      state: reportData\n    });\n  };\n  const handleAddReportClick = () => {\n    navigate(\"/section1\"); // Navigate to Section1 to start the report creation flow\n  };\n\n  // Handle checkbox changes\n  const handleCheckboxChange = (event, reportId) => {\n    event.stopPropagation();\n    setSelectedReports(prevSelected => {\n      if (prevSelected.includes(reportId)) {\n        return prevSelected.filter(id => id !== reportId);\n      } else {\n        return [...prevSelected, reportId];\n      }\n    });\n\n    // Update selectAll if not all reports are selected\n    setSelectAll(selectedReports.length + 1 === reportList.length);\n  };\n  // Handle \"Delete Selected\" button click\n  const handleDeleteSelected = async () => {\n    if (selectedReports.length === 0) {\n      alert(\"Please select at least one report to delete.\");\n      return;\n    }\n    if (!window.confirm(\"Are you sure you want to delete the selected reports?\")) {\n      return; // User cancelled\n    }\n    try {\n      // Delete selected reports from Firestore\n      const deletePromises = selectedReports.map(reportId => deleteDoc(doc(db, \"Live Report\", reportId)));\n      await Promise.all(deletePromises);\n\n      // Update the reportList state\n      setReportList(prevList => prevList.filter(report => !selectedReports.includes(report.id)));\n\n      // Clear selectedReports\n      setSelectedReports([]);\n      alert(\"Selected reports deleted successfully!\");\n    } catch (error) {\n      console.error(\"Error deleting reports:\", error);\n      alert(\"Failed to delete reports. Please try again.\");\n    }\n  };\n  const handleEditClick = reportData => {\n    // Navigate to the appropriate section for editing (e.g., Section1)\n    // You'll need to decide how you want to handle editing and pass the reportData\n    // navigate(\"/section1\", { state: reportData }); // Example: Navigate to Section1 with the report data\n    navigate(\"/section1\", {\n      state: {\n        ...reportData,\n        isEditing: true\n      }\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Reports\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleAddReportClick,\n      children: \"Add Report\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 7\n    }, this), \" \", reportList.length > 0 ? /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"report-table\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Report Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Date Created\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Date Last Run\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Actions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 246,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: reportList.map(report => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              checked: selectedReports.includes(report.id),\n              onChange: event => handleCheckboxChange(event, report.id)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 253,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 252,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            onClick: () => handleReportClick(report),\n            style: {\n              cursor: \"pointer\"\n            },\n            children: [\" \", report.reportName.replace(\".json\", \"\")]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 259,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            onClick: () => handleReportClick(report),\n            children: [\" \", new Date(report.timestamp).toLocaleString()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 267,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            onClick: () => handleReportClick(report),\n            children: [\" \", new Date(report.dateLastRun).toLocaleString()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: [\" \", /*#__PURE__*/_jsxDEV(EditOutlined, {\n              onClick: () => handleEditClick(report),\n              style: {\n                cursor: \"pointer\",\n                fontSize: \"1.2em\",\n                color: \"blue\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 280,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 277,\n            columnNumber: 17\n          }, this)]\n        }, report.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No reports found.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleDeleteSelected,\n      disabled: selectedReports.length === 0,\n      children: \"Delete Report\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 233,\n    columnNumber: 5\n  }, this);\n};\n_s(ConfirmationPage, \"U+66WaiNfzdejfhovJ/68F7g+Go=\", false, function () {\n  return [useNavigate];\n});\n_c = ConfirmationPage;\nexport default ConfirmationPage;\nvar _c;\n$RefreshReg$(_c, \"ConfirmationPage\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","collection","getDocs","deleteDoc","doc","db","EditOutlined","jsxDEV","_jsxDEV","ConfirmationPage","_s","navigate","reportList","setReportList","selectedReports","setSelectedReports","selectAll","setSelectAll","fetchReports","querySnapshot","reports","forEach","data","push","id","reportName","timestamp","dateLastRun","error","console","handleReportClick","reportData","state","handleAddReportClick","handleCheckboxChange","event","reportId","stopPropagation","prevSelected","includes","filter","length","handleDeleteSelected","alert","window","confirm","deletePromises","map","Promise","all","prevList","report","handleEditClick","isEditing","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","className","type","checked","onChange","style","cursor","replace","Date","toLocaleString","fontSize","color","disabled","_c","$RefreshReg$"],"sources":["/Users/widhardwiatmoko/Desktop/TerpantauAman/realtime-client/src/components/ConfirmationPage.js"],"sourcesContent":["// import React from \"react\";\n// import { useLocation, useNavigate } from \"react-router-dom\";\n\n// const ConfirmationPage = () => {\n//   const location = useLocation();\n//   const { dimensions, metric, refreshTime, reportName } = location.state;\n//   const navigate = useNavigate();\n\n//   const handleSubmit = () => {\n//     // Pass all data to the FinalPage\n//     navigate(\"/final\", { state: location.state });\n//   };\n\n//   //   const handleSubmit = async () => {\n//   //     try {\n//   //       // Send data to backend to be saved to GCS\n//   //       const response = await fetch(\"http://localhost:3001/save-to-gcs\", {\n//   //         method: \"POST\",\n//   //         headers: { \"Content-Type\": \"application/json\" },\n//   //         body: JSON.stringify(location.state),\n//   //       });\n\n//   //       const data = await response.json();\n//   //       console.log(data); // Log the response from the server (optional)\n\n//   //       // After saving, you can navigate to the FinalPage or elsewhere\n//   //       navigate(\"/final\", { state: location.state });\n//   //     } catch (error) {\n//   //       console.error(\"Error saving data:\", error);\n//   //       // Handle the error (e.g., display an error message to the user)\n//   //     }\n//   //   };\n\n//   return (\n//     <div>\n//       <h1>Confirm Your Selections</h1>\n//       <h2>Dimensions:</h2>\n//       <ul>\n//         {dimensions.map((value, index) => (\n//           <li key={index}>{value}</li>\n//         ))}\n//       </ul>\n//       <p>Metric: {metric}</p>\n//       <p>Refresh Time: {refreshTime}</p>\n//       <p>User Name: {reportName}</p>\n//       <button onClick={handleSubmit}>Proceed to Results</button>\n//     </div>\n//   );\n// };\n\n// export default ConfirmationPage;\n\n// import React, { useEffect, useState } from \"react\";\n// import { useLocation, useNavigate } from \"react-router-dom\";\n\n// const ConfirmationPage = () => {\n//   const navigate = useNavigate();\n//   const location = useLocation();\n\n//   const [fileList, setFileList] = useState([]); // State to store the file list\n\n//   useEffect(() => {\n//     // Fetch the file list when the component mounts\n//     const fetchFileList = async () => {\n//       try {\n//         const response = await fetch(\"http://localhost:3001/list-files\");\n//         const data = await response.json();\n//         setFileList(data.files); // Assuming the backend returns an array named 'files'\n//       } catch (error) {\n//         console.error(\"Error fetching file list:\", error);\n//         // Handle error (e.g., display an error message)\n//       }\n//     };\n\n//     fetchFileList();\n//   }, []); // Empty dependency array ensures this runs only once\n//   const handleFileClick = async (fileName) => {\n//     try {\n//       const response = await fetch(\n//         `http://localhost:3001/get-file/${fileName}`\n//       );\n//       const fileData = await response.json();\n//       navigate(\"/final\", { state: fileData }); // Pass the file data to FinalPage\n//     } catch (error) {\n//       console.error(\"Error fetching file data:\", error);\n//       // Handle error\n//     }\n//   };\n\n//   const handleSubmit = () => {\n//     navigate(\"/final\", { state: location.state });\n//   };\n\n//   return (\n//     <div>\n//       <h1>List of Files in Cloud Storage</h1>\n\n//       {fileList.length > 0 ? (\n//         <table>\n//           <thead>\n//             <tr>\n//               <th>Filename</th>\n//               <th>Date Created</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {fileList.map((file, index) => (\n//               <tr\n//                 key={index}\n//                 onClick={() => handleFileClick(file.name)}\n//                 style={{ cursor: \"pointer\" }}\n//               >\n//                 <td>{file.name.replace(\".json\", \"\")}</td>{\" \"}\n//                 {/* Remove .json extension */}\n//                 <td>{new Date(file.timeCreated).toLocaleString()}</td>{\" \"}\n//                 {/* Format timestamp */}\n//               </tr>\n//             ))}\n//           </tbody>\n//         </table>\n//       ) : (\n//         <p>No files found.</p>\n//       )}\n\n//       {/* ... (rest of your confirmation page content) ... */}\n//     </div>\n//   );\n// };\n// export default ConfirmationPage;\n\nimport React, { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { collection, getDocs, deleteDoc, doc } from \"firebase/firestore\";\nimport db from \"../firebaseConfig\"; // Assuming you have a firebase.js file for configuration\nimport { EditOutlined } from \"@ant-design/icons\"; // Import the Edit icon\nimport \"../style/ConfirmationPage.css\";\n\nconst ConfirmationPage = () => {\n  const navigate = useNavigate();\n  const [reportList, setReportList] = useState([]);\n  const [selectedReports, setSelectedReports] = useState([]); // Track selected reports\n  const [selectAll, setSelectAll] = useState(false); // State for \"Select All\" checkbox\n\n  useEffect(() => {\n    const fetchReports = async () => {\n      try {\n        const querySnapshot = await getDocs(collection(db, \"Live Report\"));\n        const reports = [];\n        querySnapshot.forEach((doc) => {\n          const data = doc.data();\n          reports.push({\n            id: doc.id, // Include the document ID\n            reportName: data.reportName,\n            timestamp: data.timestamp,\n            dateLastRun: data.dateLastRun,\n          });\n        });\n        setReportList(reports);\n      } catch (error) {\n        console.error(\"Error fetching reports from Firestore:\", error);\n        // Handle error (e.g., display an error message)\n      }\n    };\n\n    fetchReports();\n  }, [selectedReports]);\n\n  const handleReportClick = (reportData) => {\n    navigate(\"/final\", { state: reportData });\n  };\n\n  const handleAddReportClick = () => {\n    navigate(\"/section1\"); // Navigate to Section1 to start the report creation flow\n  };\n\n  // Handle checkbox changes\n  const handleCheckboxChange = (event, reportId) => {\n    event.stopPropagation();\n    setSelectedReports((prevSelected) => {\n      if (prevSelected.includes(reportId)) {\n        return prevSelected.filter((id) => id !== reportId);\n      } else {\n        return [...prevSelected, reportId];\n      }\n    });\n\n    // Update selectAll if not all reports are selected\n    setSelectAll(selectedReports.length + 1 === reportList.length);\n  };\n  // Handle \"Delete Selected\" button click\n  const handleDeleteSelected = async () => {\n    if (selectedReports.length === 0) {\n      alert(\"Please select at least one report to delete.\");\n      return;\n    }\n\n    if (\n      !window.confirm(\"Are you sure you want to delete the selected reports?\")\n    ) {\n      return; // User cancelled\n    }\n\n    try {\n      // Delete selected reports from Firestore\n      const deletePromises = selectedReports.map((reportId) =>\n        deleteDoc(doc(db, \"Live Report\", reportId))\n      );\n      await Promise.all(deletePromises);\n\n      // Update the reportList state\n      setReportList((prevList) =>\n        prevList.filter((report) => !selectedReports.includes(report.id))\n      );\n\n      // Clear selectedReports\n      setSelectedReports([]);\n\n      alert(\"Selected reports deleted successfully!\");\n    } catch (error) {\n      console.error(\"Error deleting reports:\", error);\n      alert(\"Failed to delete reports. Please try again.\");\n    }\n  };\n\n  const handleEditClick = (reportData) => {\n    // Navigate to the appropriate section for editing (e.g., Section1)\n    // You'll need to decide how you want to handle editing and pass the reportData\n    // navigate(\"/section1\", { state: reportData }); // Example: Navigate to Section1 with the report data\n    navigate(\"/section1\", { state: { ...reportData, isEditing: true } });\n  };\n\n  return (\n    <div>\n      <h1>Reports</h1>\n      <button onClick={handleAddReportClick}>Add Report</button>{\" \"}\n      {/* Add Report button */}\n      {reportList.length > 0 ? (\n        <table className=\"report-table\">\n          <thead>\n            <tr>\n              {/* <th>Select</th> Add a column for checkboxes */}\n              <th></th>\n              <th>Report Name</th>\n              <th>Date Created</th>\n              <th>Date Last Run</th>\n              <th>Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            {reportList.map((report) => (\n              <tr key={report.id}>\n                <td>\n                  <input\n                    type=\"checkbox\"\n                    checked={selectedReports.includes(report.id)}\n                    onChange={(event) => handleCheckboxChange(event, report.id)}\n                  />\n                </td>\n                <td\n                  onClick={() => handleReportClick(report)}\n                  style={{ cursor: \"pointer\" }}\n                >\n                  {\" \"}\n                  {/* Make report name clickable */}\n                  {report.reportName.replace(\".json\", \"\")}\n                </td>\n                <td onClick={() => handleReportClick(report)}>\n                  {\" \"}\n                  {/* Make date created clickable */}\n                  {new Date(report.timestamp).toLocaleString()}\n                </td>\n                <td onClick={() => handleReportClick(report)}>\n                  {\" \"}\n                  {/* Make last run date clickable */}\n                  {new Date(report.dateLastRun).toLocaleString()}\n                </td>\n                <td>\n                  {\" \"}\n                  {/* Actions cell */}\n                  <EditOutlined\n                    onClick={() => handleEditClick(report)}\n                    style={{\n                      cursor: \"pointer\",\n                      fontSize: \"1.2em\",\n                      color: \"blue\",\n                    }}\n                  />\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      ) : (\n        <p>No reports found.</p>\n      )}\n      {/* Delete Selected button */}\n      <button\n        onClick={handleDeleteSelected}\n        disabled={selectedReports.length === 0}\n      >\n        Delete Report\n      </button>\n    </div>\n  );\n};\n\nexport default ConfirmationPage;\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,UAAU,EAAEC,OAAO,EAAEC,SAAS,EAAEC,GAAG,QAAQ,oBAAoB;AACxE,OAAOC,EAAE,MAAM,mBAAmB,CAAC,CAAC;AACpC,SAASC,YAAY,QAAQ,mBAAmB,CAAC,CAAC;AAClD,OAAO,+BAA+B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvC,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC7B,MAAMC,QAAQ,GAAGX,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACY,UAAU,EAAEC,aAAa,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACe,eAAe,EAAEC,kBAAkB,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAC5D,MAAM,CAACiB,SAAS,EAAEC,YAAY,CAAC,GAAGlB,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;;EAEnDD,SAAS,CAAC,MAAM;IACd,MAAMoB,YAAY,GAAG,MAAAA,CAAA,KAAY;MAC/B,IAAI;QACF,MAAMC,aAAa,GAAG,MAAMjB,OAAO,CAACD,UAAU,CAACI,EAAE,EAAE,aAAa,CAAC,CAAC;QAClE,MAAMe,OAAO,GAAG,EAAE;QAClBD,aAAa,CAACE,OAAO,CAAEjB,GAAG,IAAK;UAC7B,MAAMkB,IAAI,GAAGlB,GAAG,CAACkB,IAAI,CAAC,CAAC;UACvBF,OAAO,CAACG,IAAI,CAAC;YACXC,EAAE,EAAEpB,GAAG,CAACoB,EAAE;YAAE;YACZC,UAAU,EAAEH,IAAI,CAACG,UAAU;YAC3BC,SAAS,EAAEJ,IAAI,CAACI,SAAS;YACzBC,WAAW,EAAEL,IAAI,CAACK;UACpB,CAAC,CAAC;QACJ,CAAC,CAAC;QACFd,aAAa,CAACO,OAAO,CAAC;MACxB,CAAC,CAAC,OAAOQ,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,wCAAwC,EAAEA,KAAK,CAAC;QAC9D;MACF;IACF,CAAC;IAEDV,YAAY,CAAC,CAAC;EAChB,CAAC,EAAE,CAACJ,eAAe,CAAC,CAAC;EAErB,MAAMgB,iBAAiB,GAAIC,UAAU,IAAK;IACxCpB,QAAQ,CAAC,QAAQ,EAAE;MAAEqB,KAAK,EAAED;IAAW,CAAC,CAAC;EAC3C,CAAC;EAED,MAAME,oBAAoB,GAAGA,CAAA,KAAM;IACjCtB,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC;EACzB,CAAC;;EAED;EACA,MAAMuB,oBAAoB,GAAGA,CAACC,KAAK,EAAEC,QAAQ,KAAK;IAChDD,KAAK,CAACE,eAAe,CAAC,CAAC;IACvBtB,kBAAkB,CAAEuB,YAAY,IAAK;MACnC,IAAIA,YAAY,CAACC,QAAQ,CAACH,QAAQ,CAAC,EAAE;QACnC,OAAOE,YAAY,CAACE,MAAM,CAAEhB,EAAE,IAAKA,EAAE,KAAKY,QAAQ,CAAC;MACrD,CAAC,MAAM;QACL,OAAO,CAAC,GAAGE,YAAY,EAAEF,QAAQ,CAAC;MACpC;IACF,CAAC,CAAC;;IAEF;IACAnB,YAAY,CAACH,eAAe,CAAC2B,MAAM,GAAG,CAAC,KAAK7B,UAAU,CAAC6B,MAAM,CAAC;EAChE,CAAC;EACD;EACA,MAAMC,oBAAoB,GAAG,MAAAA,CAAA,KAAY;IACvC,IAAI5B,eAAe,CAAC2B,MAAM,KAAK,CAAC,EAAE;MAChCE,KAAK,CAAC,8CAA8C,CAAC;MACrD;IACF;IAEA,IACE,CAACC,MAAM,CAACC,OAAO,CAAC,uDAAuD,CAAC,EACxE;MACA,OAAO,CAAC;IACV;IAEA,IAAI;MACF;MACA,MAAMC,cAAc,GAAGhC,eAAe,CAACiC,GAAG,CAAEX,QAAQ,IAClDjC,SAAS,CAACC,GAAG,CAACC,EAAE,EAAE,aAAa,EAAE+B,QAAQ,CAAC,CAC5C,CAAC;MACD,MAAMY,OAAO,CAACC,GAAG,CAACH,cAAc,CAAC;;MAEjC;MACAjC,aAAa,CAAEqC,QAAQ,IACrBA,QAAQ,CAACV,MAAM,CAAEW,MAAM,IAAK,CAACrC,eAAe,CAACyB,QAAQ,CAACY,MAAM,CAAC3B,EAAE,CAAC,CAClE,CAAC;;MAED;MACAT,kBAAkB,CAAC,EAAE,CAAC;MAEtB4B,KAAK,CAAC,wCAAwC,CAAC;IACjD,CAAC,CAAC,OAAOf,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/Ce,KAAK,CAAC,6CAA6C,CAAC;IACtD;EACF,CAAC;EAED,MAAMS,eAAe,GAAIrB,UAAU,IAAK;IACtC;IACA;IACA;IACApB,QAAQ,CAAC,WAAW,EAAE;MAAEqB,KAAK,EAAE;QAAE,GAAGD,UAAU;QAAEsB,SAAS,EAAE;MAAK;IAAE,CAAC,CAAC;EACtE,CAAC;EAED,oBACE7C,OAAA;IAAA8C,QAAA,gBACE9C,OAAA;MAAA8C,QAAA,EAAI;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAChBlD,OAAA;MAAQmD,OAAO,EAAE1B,oBAAqB;MAAAqB,QAAA,EAAC;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EAAC,GAAG,EAE7D9C,UAAU,CAAC6B,MAAM,GAAG,CAAC,gBACpBjC,OAAA;MAAOoD,SAAS,EAAC,cAAc;MAAAN,QAAA,gBAC7B9C,OAAA;QAAA8C,QAAA,eACE9C,OAAA;UAAA8C,QAAA,gBAEE9C,OAAA;YAAA+C,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACTlD,OAAA;YAAA8C,QAAA,EAAI;UAAW;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACpBlD,OAAA;YAAA8C,QAAA,EAAI;UAAY;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACrBlD,OAAA;YAAA8C,QAAA,EAAI;UAAa;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACtBlD,OAAA;YAAA8C,QAAA,EAAI;UAAO;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACd;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC,eACRlD,OAAA;QAAA8C,QAAA,EACG1C,UAAU,CAACmC,GAAG,CAAEI,MAAM,iBACrB3C,OAAA;UAAA8C,QAAA,gBACE9C,OAAA;YAAA8C,QAAA,eACE9C,OAAA;cACEqD,IAAI,EAAC,UAAU;cACfC,OAAO,EAAEhD,eAAe,CAACyB,QAAQ,CAACY,MAAM,CAAC3B,EAAE,CAAE;cAC7CuC,QAAQ,EAAG5B,KAAK,IAAKD,oBAAoB,CAACC,KAAK,EAAEgB,MAAM,CAAC3B,EAAE;YAAE;cAAA+B,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC7D;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACA,CAAC,eACLlD,OAAA;YACEmD,OAAO,EAAEA,CAAA,KAAM7B,iBAAiB,CAACqB,MAAM,CAAE;YACzCa,KAAK,EAAE;cAAEC,MAAM,EAAE;YAAU,CAAE;YAAAX,QAAA,GAE5B,GAAG,EAEHH,MAAM,CAAC1B,UAAU,CAACyC,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC;UAAA;YAAAX,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACrC,CAAC,eACLlD,OAAA;YAAImD,OAAO,EAAEA,CAAA,KAAM7B,iBAAiB,CAACqB,MAAM,CAAE;YAAAG,QAAA,GAC1C,GAAG,EAEH,IAAIa,IAAI,CAAChB,MAAM,CAACzB,SAAS,CAAC,CAAC0C,cAAc,CAAC,CAAC;UAAA;YAAAb,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC1C,CAAC,eACLlD,OAAA;YAAImD,OAAO,EAAEA,CAAA,KAAM7B,iBAAiB,CAACqB,MAAM,CAAE;YAAAG,QAAA,GAC1C,GAAG,EAEH,IAAIa,IAAI,CAAChB,MAAM,CAACxB,WAAW,CAAC,CAACyC,cAAc,CAAC,CAAC;UAAA;YAAAb,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC5C,CAAC,eACLlD,OAAA;YAAA8C,QAAA,GACG,GAAG,eAEJ9C,OAAA,CAACF,YAAY;cACXqD,OAAO,EAAEA,CAAA,KAAMP,eAAe,CAACD,MAAM,CAAE;cACvCa,KAAK,EAAE;gBACLC,MAAM,EAAE,SAAS;gBACjBI,QAAQ,EAAE,OAAO;gBACjBC,KAAK,EAAE;cACT;YAAE;cAAAf,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACH,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACA,CAAC;QAAA,GArCEP,MAAM,CAAC3B,EAAE;UAAA+B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAsCd,CACL;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,gBAERlD,OAAA;MAAA8C,QAAA,EAAG;IAAiB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CACxB,eAEDlD,OAAA;MACEmD,OAAO,EAAEjB,oBAAqB;MAC9B6B,QAAQ,EAAEzD,eAAe,CAAC2B,MAAM,KAAK,CAAE;MAAAa,QAAA,EACxC;IAED;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV,CAAC;AAAChD,EAAA,CAvKID,gBAAgB;EAAA,QACHT,WAAW;AAAA;AAAAwE,EAAA,GADxB/D,gBAAgB;AAyKtB,eAAeA,gBAAgB;AAAC,IAAA+D,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}