{"ast":null,"code":"var _jsxFileName = \"/Users/widhardwiatmoko/Desktop/TerpantauAman/realtime-client/src/components/finalPage.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from \"react\";\n// import { useLocation } from \"react-router-dom\";\n\n// const FinalPage = () => {\n//   const location = useLocation();\n//   const { section1Values, section2Value, section3Value } = location.state;\n\n//   // State to store the data fetched from the server\n//   const [queryResults, setQueryResults] = useState(null);\n\n//   const metricAliases = {\n//     totalUsers: \"total_users\",\n//     revenue: \"total_revenue\",\n//     eventCount: \"total_events\",\n//     views: \"total_views\",\n//   };\n\n//   useEffect(() => {\n//     if (!section2Value) return; // Don't fetch if metric is not selected\n\n//     const fetchData = async () => {\n//       try {\n//         const response = await fetch(\"http://localhost:3001/query-bigquery\", {\n//           method: \"POST\",\n//           headers: { \"Content-Type\": \"application/json\" },\n//           body: JSON.stringify({\n//             dimensions: section1Values, // Already an array\n//             metric: section2Value,\n//             refreshTime: section3Value,\n//           }),\n//         });\n\n//         const data = await response.json();\n//         setQueryResults(data); // Update state with the fetched data\n//       } catch (error) {\n//         console.error(\"Error fetching data:\", error);\n//         // Handle errors appropriately\n//       }\n//     };\n\n//     fetchData();\n//   }, [section1Values, section2Value, section3Value]);\n\n//   return (\n//     <div>\n//       <h1>Final Page</h1>\n\n//       <h2>Query Results:</h2>\n\n//       {/* Table for displaying results */}\n//       {queryResults && queryResults.length > 0 ? (\n//         <table>\n//           <thead>\n//             <tr>\n//               {/* Dynamically create table headers */}\n//               {section1Values.map((dimension) => (\n//                 <th key={dimension}>{dimension}</th>\n//               ))}\n//               <th>{metricAliases[section2Value]}</th>{\" \"}\n//               {/* Use metric alias here */}\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {queryResults.map((row, rowIndex) => (\n//               <tr key={rowIndex}>\n//                 {/* Dynamically render table cells */}\n//                 {section1Values.map((dimension) => (\n//                   <td key={`${rowIndex}-${dimension}`}>{row[dimension]}</td>\n//                 ))}\n//                 <td>{row[metricAliases[section2Value]]}</td>{\" \"}\n//                 {/* Use metric alias here */}\n//               </tr>\n//             ))}\n//           </tbody>\n//         </table>\n//       ) : (\n//         <p>{queryResults ? \"No data found.\" : \"Loading data...\"}</p>\n//       )}\n\n//       {/* ... (display other selections as before) ... */}\n//     </div>\n//   );\n// };\n\n// export default FinalPage;\n\nimport React, { useEffect, useState } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FinalPage = () => {\n  _s();\n  const location = useLocation();\n  const fileData = location.state;\n\n  // Extract dimensions and metric from fileData\n  const dimensions = fileData.dimensions;\n  const metric = fileData.metric;\n  const refreshTime = fileData.refreshTime;\n  console.log(dimensions);\n  const [queryResults, setQueryResults] = useState(null);\n\n  // Define metricAliases (same as before)\n  const metricAliases = {\n    totalUsers: \"total_users\",\n    revenue: \"total_revenue\",\n    eventCount: \"total_events\",\n    views: \"total_views\"\n  };\n  useEffect(() => {\n    if (!metric) return; // Don't fetch if metric is missing\n\n    const fetchData = async () => {\n      try {\n        const response = await fetch(\"/query-bigquery\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            dimensions,\n            metric,\n            refreshTime\n          })\n        });\n        const data = await response.json();\n        setQueryResults(data);\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      }\n    };\n    fetchData();\n  }, [dimensions, metric, refreshTime]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Final Page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Query Results:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this), queryResults && queryResults.length > 0 ? /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [dimensions.map(dimension => /*#__PURE__*/_jsxDEV(\"th\", {\n            children: dimension\n          }, dimension, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 17\n          }, this)), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: metricAliases[metric]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 15\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: queryResults.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [dimensions.map(dimension => /*#__PURE__*/_jsxDEV(\"td\", {\n            children: row[dimension]\n          }, `${rowIndex}-${dimension}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 19\n          }, this)), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: row[metricAliases[metric]]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 17\n          }, this), \" \"]\n        }, rowIndex, true, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: queryResults ? \"No data found.\" : \"Loading data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 5\n  }, this);\n};\n_s(FinalPage, \"C9jpC6gJRCb2Ig4CC+5uankEeXg=\", false, function () {\n  return [useLocation];\n});\n_c = FinalPage;\nexport default FinalPage;\nvar _c;\n$RefreshReg$(_c, \"FinalPage\");","map":{"version":3,"names":["React","useEffect","useState","useLocation","jsxDEV","_jsxDEV","FinalPage","_s","location","fileData","state","dimensions","metric","refreshTime","console","log","queryResults","setQueryResults","metricAliases","totalUsers","revenue","eventCount","views","fetchData","response","fetch","method","headers","body","JSON","stringify","data","json","error","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","dimension","row","rowIndex","_c","$RefreshReg$"],"sources":["/Users/widhardwiatmoko/Desktop/TerpantauAman/realtime-client/src/components/finalPage.js"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\n// import { useLocation } from \"react-router-dom\";\n\n// const FinalPage = () => {\n//   const location = useLocation();\n//   const { section1Values, section2Value, section3Value } = location.state;\n\n//   // State to store the data fetched from the server\n//   const [queryResults, setQueryResults] = useState(null);\n\n//   const metricAliases = {\n//     totalUsers: \"total_users\",\n//     revenue: \"total_revenue\",\n//     eventCount: \"total_events\",\n//     views: \"total_views\",\n//   };\n\n//   useEffect(() => {\n//     if (!section2Value) return; // Don't fetch if metric is not selected\n\n//     const fetchData = async () => {\n//       try {\n//         const response = await fetch(\"http://localhost:3001/query-bigquery\", {\n//           method: \"POST\",\n//           headers: { \"Content-Type\": \"application/json\" },\n//           body: JSON.stringify({\n//             dimensions: section1Values, // Already an array\n//             metric: section2Value,\n//             refreshTime: section3Value,\n//           }),\n//         });\n\n//         const data = await response.json();\n//         setQueryResults(data); // Update state with the fetched data\n//       } catch (error) {\n//         console.error(\"Error fetching data:\", error);\n//         // Handle errors appropriately\n//       }\n//     };\n\n//     fetchData();\n//   }, [section1Values, section2Value, section3Value]);\n\n//   return (\n//     <div>\n//       <h1>Final Page</h1>\n\n//       <h2>Query Results:</h2>\n\n//       {/* Table for displaying results */}\n//       {queryResults && queryResults.length > 0 ? (\n//         <table>\n//           <thead>\n//             <tr>\n//               {/* Dynamically create table headers */}\n//               {section1Values.map((dimension) => (\n//                 <th key={dimension}>{dimension}</th>\n//               ))}\n//               <th>{metricAliases[section2Value]}</th>{\" \"}\n//               {/* Use metric alias here */}\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {queryResults.map((row, rowIndex) => (\n//               <tr key={rowIndex}>\n//                 {/* Dynamically render table cells */}\n//                 {section1Values.map((dimension) => (\n//                   <td key={`${rowIndex}-${dimension}`}>{row[dimension]}</td>\n//                 ))}\n//                 <td>{row[metricAliases[section2Value]]}</td>{\" \"}\n//                 {/* Use metric alias here */}\n//               </tr>\n//             ))}\n//           </tbody>\n//         </table>\n//       ) : (\n//         <p>{queryResults ? \"No data found.\" : \"Loading data...\"}</p>\n//       )}\n\n//       {/* ... (display other selections as before) ... */}\n//     </div>\n//   );\n// };\n\n// export default FinalPage;\n\nimport React, { useEffect, useState } from \"react\";\nimport { useLocation } from \"react-router-dom\";\n\nconst FinalPage = () => {\n  const location = useLocation();\n  const fileData = location.state;\n\n  // Extract dimensions and metric from fileData\n  const dimensions = fileData.dimensions;\n  const metric = fileData.metric;\n  const refreshTime = fileData.refreshTime;\n\n  console.log(dimensions);\n\n  const [queryResults, setQueryResults] = useState(null);\n\n  // Define metricAliases (same as before)\n  const metricAliases = {\n    totalUsers: \"total_users\",\n    revenue: \"total_revenue\",\n    eventCount: \"total_events\",\n    views: \"total_views\",\n  };\n\n  useEffect(() => {\n    if (!metric) return; // Don't fetch if metric is missing\n\n    const fetchData = async () => {\n      try {\n        const response = await fetch(\"/query-bigquery\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({\n            dimensions,\n            metric,\n            refreshTime,\n          }),\n        });\n\n        const data = await response.json();\n        setQueryResults(data);\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      }\n    };\n\n    fetchData();\n  }, [dimensions, metric, refreshTime]);\n\n  return (\n    <div>\n      <h1>Final Page</h1>\n\n      <h2>Query Results:</h2>\n\n      {queryResults && queryResults.length > 0 ? (\n        <table>\n          <thead>\n            <tr>\n              {/* Dynamically create table headers */}\n              {dimensions.map((dimension) => (\n                <th key={dimension}>{dimension}</th>\n              ))}\n              <th>{metricAliases[metric]}</th> {/* Use metric alias here */}\n            </tr>\n          </thead>\n          <tbody>\n            {queryResults.map((row, rowIndex) => (\n              <tr key={rowIndex}>\n                {/* Dynamically render table cells */}\n                {dimensions.map((dimension) => (\n                  <td key={`${rowIndex}-${dimension}`}>{row[dimension]}</td>\n                ))}\n                <td>{row[metricAliases[metric]]}</td>{\" \"}\n                {/* Use metric alias here */}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      ) : (\n        <p>{queryResults ? \"No data found.\" : \"Loading data...\"}</p>\n      )}\n\n      {/* ... (Table for displaying results - same as before) ... */}\n    </div>\n  );\n};\n\nexport default FinalPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}