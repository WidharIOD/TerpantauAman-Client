{"ast":null,"code":"var _jsxFileName = \"/Users/widhardwiatmoko/Desktop/TerpantauAman/realtime-client/src/components/finalPage.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from \"react\";\n// import { useLocation } from \"react-router-dom\";\n\n// const FinalPage = () => {\n//   const location = useLocation();\n//   const { section1Values, section2Value, section3Value } = location.state;\n\n//   // State to store the data fetched from the server\n//   const [queryResults, setQueryResults] = useState(null);\n\n//   const metricAliases = {\n//     totalUsers: \"total_users\",\n//     revenue: \"total_revenue\",\n//     eventCount: \"total_events\",\n//     views: \"total_views\",\n//   };\n\n//   useEffect(() => {\n//     if (!section2Value) return; // Don't fetch if metric is not selected\n\n//     const fetchData = async () => {\n//       try {\n//         const response = await fetch(\"http://localhost:3001/query-bigquery\", {\n//           method: \"POST\",\n//           headers: { \"Content-Type\": \"application/json\" },\n//           body: JSON.stringify({\n//             dimensions: section1Values, // Already an array\n//             metric: section2Value,\n//             refreshTime: section3Value,\n//           }),\n//         });\n\n//         const data = await response.json();\n//         setQueryResults(data); // Update state with the fetched data\n//       } catch (error) {\n//         console.error(\"Error fetching data:\", error);\n//         // Handle errors appropriately\n//       }\n//     };\n\n//     fetchData();\n//   }, [section1Values, section2Value, section3Value]);\n\n//   return (\n//     <div>\n//       <h1>Final Page</h1>\n\n//       <h2>Query Results:</h2>\n\n//       {/* Table for displaying results */}\n//       {queryResults && queryResults.length > 0 ? (\n//         <table>\n//           <thead>\n//             <tr>\n//               {/* Dynamically create table headers */}\n//               {section1Values.map((dimension) => (\n//                 <th key={dimension}>{dimension}</th>\n//               ))}\n//               <th>{metricAliases[section2Value]}</th>{\" \"}\n//               {/* Use metric alias here */}\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {queryResults.map((row, rowIndex) => (\n//               <tr key={rowIndex}>\n//                 {/* Dynamically render table cells */}\n//                 {section1Values.map((dimension) => (\n//                   <td key={`${rowIndex}-${dimension}`}>{row[dimension]}</td>\n//                 ))}\n//                 <td>{row[metricAliases[section2Value]]}</td>{\" \"}\n//                 {/* Use metric alias here */}\n//               </tr>\n//             ))}\n//           </tbody>\n//         </table>\n//       ) : (\n//         <p>{queryResults ? \"No data found.\" : \"Loading data...\"}</p>\n//       )}\n\n//       {/* ... (display other selections as before) ... */}\n//     </div>\n//   );\n// };\n\n// export default FinalPage;\n\nimport React, { useEffect, useState } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FinalPage = () => {\n  _s();\n  const location = useLocation();\n  const fileData = location.state;\n\n  // Extract dimensions and metric from fileData\n  const {\n    reportName\n  } = location.state; // Get reportName from previous page\n\n  const [dimensions, setDimensions] = useState([]);\n  const [metric, setMetric] = useState(null);\n  const [refreshTime, setRefreshTime] = useState(\"\");\n  //   const [reportName, setReportName] = useState(\"\");\n\n  const [queryResults, setQueryResults] = useState(null);\n\n  // Define metricAliases (same as before)\n  const metricAliases = {\n    totalUsers: \"total_users\",\n    revenue: \"total_revenue\",\n    eventCount: \"total_events\",\n    views: \"total_views\"\n  };\n\n  //   console.log(\n  //     JSON.stringify({\n  //       dimensions,\n  //       metric,\n  //     })\n  //   );\n\n  useEffect(() => {\n    setDimensions(fileData.dimensions || []);\n    setMetric(fileData.metric || null);\n    setRefreshTime(fileData.refreshTime || \"\");\n    // setReportName(fileData.reportName || \"\");\n\n    if (!metric) return; // Don't fetch if metric is missing\n\n    //     const fetchData = async () => {\n    //       try {\n    //         const response = await fetch(\"http://localhost:3001/query-bigquery\", {\n    //           method: \"POST\",\n    //           headers: { \"Content-Type\": \"application/json\" },\n    //           body: JSON.stringify({\n    //             dimensions,\n    //             metric,\n    //             refreshTime,\n    //           }),\n    //         });\n\n    //         const data = await response.json();\n    //         setQueryResults(data);\n    //       } catch (error) {\n    //         console.error(\"Error fetching data:\", error);\n    //       }\n    //     };\n\n    //     fetchData();\n    //   }, [dimensions, metric, refreshTime]);\n    const fetchData = async () => {\n      try {\n        const response = await fetch(`http://localhost:3001/get-file-by-report-name/${reportName}`);\n        const fileData = await response.json();\n\n        // Extract data from the fetched JSON\n        setDimensions(fileData.dimensions || []);\n        setMetric(fileData.metric || null);\n        setQueryResults(fileData.results || null);\n      } catch (error) {\n        console.error(\"Error fetching file data:\", error);\n        // Handle error (e.g., display an error message)\n      }\n    };\n    fetchData();\n  }, [reportName]); // Re-fetch if reportName changes\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: queryResults && queryResults.length > 0 ? /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [dimensions.map(dimension => /*#__PURE__*/_jsxDEV(\"th\", {\n            children: dimension\n          }, dimension, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 17\n          }, this) // Creates headers for each dimension\n          ), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: metricAliases[metric]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: queryResults.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [dimensions.map(dimension => /*#__PURE__*/_jsxDEV(\"td\", {\n            children: row[dimension]\n          }, `${rowIndex}-${dimension}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 19\n          }, this) // Renders cells for each dimension\n          ), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: row[metricAliases[metric]]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 17\n          }, this)]\n        }, rowIndex, true, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: queryResults ? \"No data found.\" : \"Loading data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 169,\n    columnNumber: 5\n  }, this);\n};\n_s(FinalPage, \"ANaL79Ljp5VfMeNNTvJiBc6JjVs=\", false, function () {\n  return [useLocation];\n});\n_c = FinalPage;\nexport default FinalPage;\nvar _c;\n$RefreshReg$(_c, \"FinalPage\");","map":{"version":3,"names":["React","useEffect","useState","useLocation","jsxDEV","_jsxDEV","FinalPage","_s","location","fileData","state","reportName","dimensions","setDimensions","metric","setMetric","refreshTime","setRefreshTime","queryResults","setQueryResults","metricAliases","totalUsers","revenue","eventCount","views","fetchData","response","fetch","json","results","error","console","children","length","map","dimension","fileName","_jsxFileName","lineNumber","columnNumber","row","rowIndex","_c","$RefreshReg$"],"sources":["/Users/widhardwiatmoko/Desktop/TerpantauAman/realtime-client/src/components/finalPage.js"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\n// import { useLocation } from \"react-router-dom\";\n\n// const FinalPage = () => {\n//   const location = useLocation();\n//   const { section1Values, section2Value, section3Value } = location.state;\n\n//   // State to store the data fetched from the server\n//   const [queryResults, setQueryResults] = useState(null);\n\n//   const metricAliases = {\n//     totalUsers: \"total_users\",\n//     revenue: \"total_revenue\",\n//     eventCount: \"total_events\",\n//     views: \"total_views\",\n//   };\n\n//   useEffect(() => {\n//     if (!section2Value) return; // Don't fetch if metric is not selected\n\n//     const fetchData = async () => {\n//       try {\n//         const response = await fetch(\"http://localhost:3001/query-bigquery\", {\n//           method: \"POST\",\n//           headers: { \"Content-Type\": \"application/json\" },\n//           body: JSON.stringify({\n//             dimensions: section1Values, // Already an array\n//             metric: section2Value,\n//             refreshTime: section3Value,\n//           }),\n//         });\n\n//         const data = await response.json();\n//         setQueryResults(data); // Update state with the fetched data\n//       } catch (error) {\n//         console.error(\"Error fetching data:\", error);\n//         // Handle errors appropriately\n//       }\n//     };\n\n//     fetchData();\n//   }, [section1Values, section2Value, section3Value]);\n\n//   return (\n//     <div>\n//       <h1>Final Page</h1>\n\n//       <h2>Query Results:</h2>\n\n//       {/* Table for displaying results */}\n//       {queryResults && queryResults.length > 0 ? (\n//         <table>\n//           <thead>\n//             <tr>\n//               {/* Dynamically create table headers */}\n//               {section1Values.map((dimension) => (\n//                 <th key={dimension}>{dimension}</th>\n//               ))}\n//               <th>{metricAliases[section2Value]}</th>{\" \"}\n//               {/* Use metric alias here */}\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {queryResults.map((row, rowIndex) => (\n//               <tr key={rowIndex}>\n//                 {/* Dynamically render table cells */}\n//                 {section1Values.map((dimension) => (\n//                   <td key={`${rowIndex}-${dimension}`}>{row[dimension]}</td>\n//                 ))}\n//                 <td>{row[metricAliases[section2Value]]}</td>{\" \"}\n//                 {/* Use metric alias here */}\n//               </tr>\n//             ))}\n//           </tbody>\n//         </table>\n//       ) : (\n//         <p>{queryResults ? \"No data found.\" : \"Loading data...\"}</p>\n//       )}\n\n//       {/* ... (display other selections as before) ... */}\n//     </div>\n//   );\n// };\n\n// export default FinalPage;\n\nimport React, { useEffect, useState } from \"react\";\nimport { useLocation } from \"react-router-dom\";\n\nconst FinalPage = () => {\n  const location = useLocation();\n  const fileData = location.state;\n\n  // Extract dimensions and metric from fileData\n  const { reportName } = location.state; // Get reportName from previous page\n\n  const [dimensions, setDimensions] = useState([]);\n  const [metric, setMetric] = useState(null);\n  const [refreshTime, setRefreshTime] = useState(\"\");\n  //   const [reportName, setReportName] = useState(\"\");\n\n  const [queryResults, setQueryResults] = useState(null);\n\n  // Define metricAliases (same as before)\n  const metricAliases = {\n    totalUsers: \"total_users\",\n    revenue: \"total_revenue\",\n    eventCount: \"total_events\",\n    views: \"total_views\",\n  };\n\n  //   console.log(\n  //     JSON.stringify({\n  //       dimensions,\n  //       metric,\n  //     })\n  //   );\n\n  useEffect(() => {\n    setDimensions(fileData.dimensions || []);\n    setMetric(fileData.metric || null);\n    setRefreshTime(fileData.refreshTime || \"\");\n    // setReportName(fileData.reportName || \"\");\n\n    if (!metric) return; // Don't fetch if metric is missing\n\n    //     const fetchData = async () => {\n    //       try {\n    //         const response = await fetch(\"http://localhost:3001/query-bigquery\", {\n    //           method: \"POST\",\n    //           headers: { \"Content-Type\": \"application/json\" },\n    //           body: JSON.stringify({\n    //             dimensions,\n    //             metric,\n    //             refreshTime,\n    //           }),\n    //         });\n\n    //         const data = await response.json();\n    //         setQueryResults(data);\n    //       } catch (error) {\n    //         console.error(\"Error fetching data:\", error);\n    //       }\n    //     };\n\n    //     fetchData();\n    //   }, [dimensions, metric, refreshTime]);\n    const fetchData = async () => {\n      try {\n        const response = await fetch(\n          `http://localhost:3001/get-file-by-report-name/${reportName}`\n        );\n        const fileData = await response.json();\n\n        // Extract data from the fetched JSON\n        setDimensions(fileData.dimensions || []);\n        setMetric(fileData.metric || null);\n        setQueryResults(fileData.results || null);\n      } catch (error) {\n        console.error(\"Error fetching file data:\", error);\n        // Handle error (e.g., display an error message)\n      }\n    };\n\n    fetchData();\n  }, [reportName]); // Re-fetch if reportName changes\n\n  return (\n    <div>\n      {/* ... (other page content) ... */}\n\n      {queryResults && queryResults.length > 0 ? (\n        <table>\n          <thead>\n            <tr>\n              {dimensions.map((dimension) => (\n                <th key={dimension}>{dimension}</th> // Creates headers for each dimension\n              ))}\n              <th>{metricAliases[metric]}</th>\n            </tr>\n          </thead>\n          <tbody>\n            {queryResults.map((row, rowIndex) => (\n              <tr key={rowIndex}>\n                {dimensions.map((dimension) => (\n                  <td key={`${rowIndex}-${dimension}`}>{row[dimension]}</td> // Renders cells for each dimension\n                ))}\n                <td>{row[metricAliases[metric]]}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      ) : (\n        <p>{queryResults ? \"No data found.\" : \"Loading data...\"}</p>\n      )}\n    </div>\n  );\n};\n\nexport default FinalPage;\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAMC,QAAQ,GAAGL,WAAW,CAAC,CAAC;EAC9B,MAAMM,QAAQ,GAAGD,QAAQ,CAACE,KAAK;;EAE/B;EACA,MAAM;IAAEC;EAAW,CAAC,GAAGH,QAAQ,CAACE,KAAK,CAAC,CAAC;;EAEvC,MAAM,CAACE,UAAU,EAAEC,aAAa,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACY,MAAM,EAAEC,SAAS,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EAC1C,MAAM,CAACc,WAAW,EAAEC,cAAc,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAClD;;EAEA,MAAM,CAACgB,YAAY,EAAEC,eAAe,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;;EAEtD;EACA,MAAMkB,aAAa,GAAG;IACpBC,UAAU,EAAE,aAAa;IACzBC,OAAO,EAAE,eAAe;IACxBC,UAAU,EAAE,cAAc;IAC1BC,KAAK,EAAE;EACT,CAAC;;EAED;EACA;EACA;EACA;EACA;EACA;;EAEAvB,SAAS,CAAC,MAAM;IACdY,aAAa,CAACJ,QAAQ,CAACG,UAAU,IAAI,EAAE,CAAC;IACxCG,SAAS,CAACN,QAAQ,CAACK,MAAM,IAAI,IAAI,CAAC;IAClCG,cAAc,CAACR,QAAQ,CAACO,WAAW,IAAI,EAAE,CAAC;IAC1C;;IAEA,IAAI,CAACF,MAAM,EAAE,OAAO,CAAC;;IAErB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA,MAAMW,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAC1B,iDAAiDhB,UAAU,EAC7D,CAAC;QACD,MAAMF,QAAQ,GAAG,MAAMiB,QAAQ,CAACE,IAAI,CAAC,CAAC;;QAEtC;QACAf,aAAa,CAACJ,QAAQ,CAACG,UAAU,IAAI,EAAE,CAAC;QACxCG,SAAS,CAACN,QAAQ,CAACK,MAAM,IAAI,IAAI,CAAC;QAClCK,eAAe,CAACV,QAAQ,CAACoB,OAAO,IAAI,IAAI,CAAC;MAC3C,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;QACjD;MACF;IACF,CAAC;IAEDL,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,CAACd,UAAU,CAAC,CAAC,CAAC,CAAC;;EAElB,oBACEN,OAAA;IAAA2B,QAAA,EAGGd,YAAY,IAAIA,YAAY,CAACe,MAAM,GAAG,CAAC,gBACtC5B,OAAA;MAAA2B,QAAA,gBACE3B,OAAA;QAAA2B,QAAA,eACE3B,OAAA;UAAA2B,QAAA,GACGpB,UAAU,CAACsB,GAAG,CAAEC,SAAS,iBACxB9B,OAAA;YAAA2B,QAAA,EAAqBG;UAAS,GAArBA,SAAS;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAiB,CAAC,CAAC;UACtC,CAAC,eACFlC,OAAA;YAAA2B,QAAA,EAAKZ,aAAa,CAACN,MAAM;UAAC;YAAAsB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC9B;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC,eACRlC,OAAA;QAAA2B,QAAA,EACGd,YAAY,CAACgB,GAAG,CAAC,CAACM,GAAG,EAAEC,QAAQ,kBAC9BpC,OAAA;UAAA2B,QAAA,GACGpB,UAAU,CAACsB,GAAG,CAAEC,SAAS,iBACxB9B,OAAA;YAAA2B,QAAA,EAAsCQ,GAAG,CAACL,SAAS;UAAC,GAA3C,GAAGM,QAAQ,IAAIN,SAAS,EAAE;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAsB,CAAC,CAAC;UAC5D,CAAC,eACFlC,OAAA;YAAA2B,QAAA,EAAKQ,GAAG,CAACpB,aAAa,CAACN,MAAM,CAAC;UAAC;YAAAsB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC;QAAA,GAJ9BE,QAAQ;UAAAL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAKb,CACL;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,gBAERlC,OAAA;MAAA2B,QAAA,EAAId,YAAY,GAAG,gBAAgB,GAAG;IAAiB;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI;EAC5D;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAAChC,EAAA,CA5GID,SAAS;EAAA,QACIH,WAAW;AAAA;AAAAuC,EAAA,GADxBpC,SAAS;AA8Gf,eAAeA,SAAS;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}