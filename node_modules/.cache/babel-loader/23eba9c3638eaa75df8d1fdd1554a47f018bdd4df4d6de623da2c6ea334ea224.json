{"ast":null,"code":"var _jsxFileName = \"/Users/widhardwiatmoko/Desktop/TerpantauAman/realtime-client/src/components/UserInfoPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useNavigate, useLocation } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserInfoPage = () => {\n  _s();\n  var _location$state, _location$state2, _location$state3;\n  const navigate = useNavigate();\n  const location = useLocation();\n  const fileData = location.state;\n\n  // Retrieve values from previous steps\n  const dimensions = ((_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.dimensions) || [];\n  const metric = ((_location$state2 = location.state) === null || _location$state2 === void 0 ? void 0 : _location$state2.metric) || null;\n  const refreshTime = ((_location$state3 = location.state) === null || _location$state3 === void 0 ? void 0 : _location$state3.refreshTime) || \"\";\n  //   const [dimensions, setDimensions] = useState([]);\n  //   const [metric, setMetric] = useState(null);\n  //   const [refreshTime, setRefreshTime] = useState(\"\");\n\n  const [reportName, setUserName] = useState(\"\"); // State for user's name\n  const [isLoading, setIsLoading] = useState(false); // Loading state\n\n  const [queryResults, setQueryResults] = useState(null);\n  const handleSubmit = async () => {\n    // setDimensions(fileData.dimensions || []);\n    // setMetric(fileData.metric || null);\n    // setRefreshTime(fileData.refreshTime || \"\");\n    // setUserName(fileData.reportName || \"\");\n\n    if (!metric) return; // Don't fetch if metric is missing\n    if (reportName.trim() === \"\") {\n      // Basic validation (check for empty name)\n      alert(\"Please enter your name.\");\n      return;\n    }\n    setIsLoading(true); // Set loading state\n\n    try {\n      // Fetch data from BigQuery\n      const res = await fetch(\"http://localhost:3001/query-bigquery\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          dimensions,\n          metric,\n          refreshTime\n        })\n      });\n      const bigqueryData = await res.json();\n\n      // Add reportName and selection details to the data\n      const dataToSave = {\n        reportName,\n        dimensions,\n        metric,\n        refreshTime,\n        results: bigqueryData\n      };\n\n      // **Wait for the first fetch to complete before the second one**\n      // Save to Google Cloud Storage\n      const response = await fetch(\"http://localhost:3001/save-to-gcs\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(dataToSave)\n      });\n      await response.json();\n      console.log(data);\n      navigate(\"/confirmation\", {\n        state: dataToSave\n      });\n    } catch (error) {\n      console.error(\"Error:\", error);\n      // Handle errors appropriately (e.g., display error messages to the user)\n    } finally {\n      setIsLoading(false); // Reset loading state\n    }\n  };\n\n  //   const handleSubmit = () => {\n  //     if (userName.trim() === \"\") {\n  //       // Basic validation (check for empty name)\n  //       alert(\"Please enter your name.\");\n  //       return;\n  //     }\n\n  //     // Pass all collected data to the final page\n  //     // navigate(\"/final\", {\n  //     //   state: {\n  //     //     section1Values,\n  //     //     section2Value,\n  //     //     userName,\n  //     //   },\n  //     // });\n  //     navigate(\"/confirmation\", {\n  //       state: {\n  //         section1Values: location.state.section1Values,\n  //         section2Value: location.state.section2Value,\n  //         section3Value: location.state.section3Value,\n  //         userName, // Include userName from this page\n  //       },\n  //     });\n\n  //     // navigate(\"/confirmation\", { state: location.state }); // Pass the state along\n  //   };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"User Information\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"reportName\",\n      children: \"Enter your name:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      id: \"reportName\",\n      value: reportName,\n      onChange: e => setUserName(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSubmit,\n      disabled: isLoading,\n      children: isLoading ? \"Processing...\" : \"Proceed to Results\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this);\n};\n_s(UserInfoPage, \"Jw+rfJW85RaF6Gwmoqa+8x/Utmk=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = UserInfoPage;\nexport default UserInfoPage;\nvar _c;\n$RefreshReg$(_c, \"UserInfoPage\");","map":{"version":3,"names":["React","useState","useNavigate","useLocation","jsxDEV","_jsxDEV","UserInfoPage","_s","_location$state","_location$state2","_location$state3","navigate","location","fileData","state","dimensions","metric","refreshTime","reportName","setUserName","isLoading","setIsLoading","queryResults","setQueryResults","handleSubmit","trim","alert","res","fetch","method","headers","body","JSON","stringify","bigqueryData","json","dataToSave","results","response","console","log","data","error","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","type","id","value","onChange","e","target","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/widhardwiatmoko/Desktop/TerpantauAman/realtime-client/src/components/UserInfoPage.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { useNavigate, useLocation } from \"react-router-dom\";\n\nconst UserInfoPage = () => {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const fileData = location.state;\n\n  // Retrieve values from previous steps\n  const dimensions = location.state?.dimensions || [];\n  const metric = location.state?.metric || null;\n  const refreshTime = location.state?.refreshTime || \"\";\n  //   const [dimensions, setDimensions] = useState([]);\n  //   const [metric, setMetric] = useState(null);\n  //   const [refreshTime, setRefreshTime] = useState(\"\");\n\n  const [reportName, setUserName] = useState(\"\"); // State for user's name\n  const [isLoading, setIsLoading] = useState(false); // Loading state\n\n  const [queryResults, setQueryResults] = useState(null);\n\n  const handleSubmit = async () => {\n    // setDimensions(fileData.dimensions || []);\n    // setMetric(fileData.metric || null);\n    // setRefreshTime(fileData.refreshTime || \"\");\n    // setUserName(fileData.reportName || \"\");\n\n    if (!metric) return; // Don't fetch if metric is missing\n    if (reportName.trim() === \"\") {\n      // Basic validation (check for empty name)\n      alert(\"Please enter your name.\");\n      return;\n    }\n    setIsLoading(true); // Set loading state\n\n    try {\n      // Fetch data from BigQuery\n      const res = await fetch(\"http://localhost:3001/query-bigquery\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          dimensions,\n          metric,\n          refreshTime,\n        }),\n      });\n      const bigqueryData = await res.json();\n\n      // Add reportName and selection details to the data\n      const dataToSave = {\n        reportName,\n        dimensions,\n        metric,\n        refreshTime,\n        results: bigqueryData,\n      };\n\n      // **Wait for the first fetch to complete before the second one**\n      // Save to Google Cloud Storage\n      const response = await fetch(\"http://localhost:3001/save-to-gcs\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(dataToSave),\n      });\n\n      await response.json();\n      console.log(data);\n\n      navigate(\"/confirmation\", { state: dataToSave });\n    } catch (error) {\n      console.error(\"Error:\", error);\n      // Handle errors appropriately (e.g., display error messages to the user)\n    } finally {\n      setIsLoading(false); // Reset loading state\n    }\n  };\n\n  //   const handleSubmit = () => {\n  //     if (userName.trim() === \"\") {\n  //       // Basic validation (check for empty name)\n  //       alert(\"Please enter your name.\");\n  //       return;\n  //     }\n\n  //     // Pass all collected data to the final page\n  //     // navigate(\"/final\", {\n  //     //   state: {\n  //     //     section1Values,\n  //     //     section2Value,\n  //     //     userName,\n  //     //   },\n  //     // });\n  //     navigate(\"/confirmation\", {\n  //       state: {\n  //         section1Values: location.state.section1Values,\n  //         section2Value: location.state.section2Value,\n  //         section3Value: location.state.section3Value,\n  //         userName, // Include userName from this page\n  //       },\n  //     });\n\n  //     // navigate(\"/confirmation\", { state: location.state }); // Pass the state along\n  //   };\n\n  return (\n    <div>\n      <h1>User Information</h1>\n      <label htmlFor=\"reportName\">Enter your name:</label>\n      <input\n        type=\"text\"\n        id=\"reportName\"\n        value={reportName}\n        onChange={(e) => setUserName(e.target.value)}\n      />\n      <button onClick={handleSubmit} disabled={isLoading}>\n        {isLoading ? \"Processing...\" : \"Proceed to Results\"}\n      </button>\n    </div>\n  );\n};\n\nexport default UserInfoPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}