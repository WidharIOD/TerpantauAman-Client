{"ast":null,"code":"var _jsxFileName = \"/Users/widhardwiatmoko/Desktop/TerpantauAman/realtime-client/src/components/finalPage.js\",\n  _s = $RefreshSig$();\n// import React from \"react\";\n// import { useLocation } from \"react-router-dom\";\n\n// const FinalPage = () => {\n//   const location = useLocation();\n//   const { section1Values, section2Value, section3Value } = location.state;\n\n//   return (\n//     <div>\n//       <h1>Final Page</h1>\n\n//       <h2>Section 1:</h2>\n//       {/* Check if section1Values is an array before mapping */}\n//       {Array.isArray(section1Values) && (\n//         <ul>\n//           {section1Values.map((value, index) => (\n//             <li key={index}>{value}</li>\n//           ))}\n//         </ul>\n//       )}\n\n//       {/* Display other values as before */}\n//       <p>Section 2: {section2Value}</p>\n//       <p>Section 3: {section3Value}</p>\n//     </div>\n//   );\n// };\n\n// export default FinalPage;\n\nimport React, { useEffect, useState } from \"react\"; // Import useState for data storage\nimport { useLocation } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FinalPage = () => {\n  _s();\n  const location = useLocation();\n  const {\n    section1Values,\n    section2Value,\n    section3Value\n  } = location.state;\n\n  // State to store the data fetched from the server\n  const [queryResults, setQueryResults] = useState(null);\n  useEffect(() => {\n    // Function to fetch data from the backend\n    const fetchData = async () => {\n      try {\n        const response = await fetch(\"https://localhost:3001/query-bigquery\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            dimensions: section1Values,\n            refreshTime: section3Value\n          })\n        });\n        const data = await response.json();\n        setQueryResults(data); // Update state with the fetched data\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n        // Handle errors appropriately (e.g., set an error state and display an error message)\n      }\n    };\n    fetchData();\n  }, [section1Values, section2Value, section3Value]); // Fetch data whenever the input values change\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Final Page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Query Results:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), queryResults ? /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: JSON.stringify(queryResults, null, 2)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }, this) // Display JSON in a readable format\n    : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n_s(FinalPage, \"C9jpC6gJRCb2Ig4CC+5uankEeXg=\", false, function () {\n  return [useLocation];\n});\n_c = FinalPage;\nexport default FinalPage;\nvar _c;\n$RefreshReg$(_c, \"FinalPage\");","map":{"version":3,"names":["React","useEffect","useState","useLocation","jsxDEV","_jsxDEV","FinalPage","_s","location","section1Values","section2Value","section3Value","state","queryResults","setQueryResults","fetchData","response","fetch","method","headers","body","JSON","stringify","dimensions","refreshTime","data","json","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/widhardwiatmoko/Desktop/TerpantauAman/realtime-client/src/components/finalPage.js"],"sourcesContent":["// import React from \"react\";\n// import { useLocation } from \"react-router-dom\";\n\n// const FinalPage = () => {\n//   const location = useLocation();\n//   const { section1Values, section2Value, section3Value } = location.state;\n\n//   return (\n//     <div>\n//       <h1>Final Page</h1>\n\n//       <h2>Section 1:</h2>\n//       {/* Check if section1Values is an array before mapping */}\n//       {Array.isArray(section1Values) && (\n//         <ul>\n//           {section1Values.map((value, index) => (\n//             <li key={index}>{value}</li>\n//           ))}\n//         </ul>\n//       )}\n\n//       {/* Display other values as before */}\n//       <p>Section 2: {section2Value}</p>\n//       <p>Section 3: {section3Value}</p>\n//     </div>\n//   );\n// };\n\n// export default FinalPage;\n\nimport React, { useEffect, useState } from \"react\"; // Import useState for data storage\nimport { useLocation } from \"react-router-dom\";\n\nconst FinalPage = () => {\n  const location = useLocation();\n  const { section1Values, section2Value, section3Value } = location.state;\n\n  // State to store the data fetched from the server\n  const [queryResults, setQueryResults] = useState(null);\n\n  useEffect(() => {\n    // Function to fetch data from the backend\n    const fetchData = async () => {\n      try {\n        const response = await fetch(\"https://localhost:3001/query-bigquery\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({\n            dimensions: section1Values,\n            refreshTime: section3Value,\n          }),\n        });\n\n        const data = await response.json();\n        setQueryResults(data); // Update state with the fetched data\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n        // Handle errors appropriately (e.g., set an error state and display an error message)\n      }\n    };\n\n    fetchData();\n  }, [section1Values, section2Value, section3Value]); // Fetch data whenever the input values change\n\n  return (\n    <div>\n      <h1>Final Page</h1>\n\n      <h2>Query Results:</h2>\n\n      {/* Conditionally render the results based on queryResults state */}\n      {queryResults ? (\n        <pre>{JSON.stringify(queryResults, null, 2)}</pre> // Display JSON in a readable format\n      ) : (\n        <p>Loading data...</p>\n      )}\n\n      {/* ... (display other selections as before) ... */}\n    </div>\n  );\n};\n\nexport default FinalPage;\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO,CAAC,CAAC;AACpD,SAASC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAMC,QAAQ,GAAGL,WAAW,CAAC,CAAC;EAC9B,MAAM;IAAEM,cAAc;IAAEC,aAAa;IAAEC;EAAc,CAAC,GAAGH,QAAQ,CAACI,KAAK;;EAEvE;EACA,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAEtDD,SAAS,CAAC,MAAM;IACd;IACA,MAAMc,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,uCAAuC,EAAE;UACpEC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YAAE,cAAc,EAAE;UAAmB,CAAC;UAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YACnBC,UAAU,EAAEd,cAAc;YAC1Be,WAAW,EAAEb;UACf,CAAC;QACH,CAAC,CAAC;QAEF,MAAMc,IAAI,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;QAClCZ,eAAe,CAACW,IAAI,CAAC,CAAC,CAAC;MACzB,CAAC,CAAC,OAAOE,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;QAC5C;MACF;IACF,CAAC;IAEDZ,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,CAACN,cAAc,EAAEC,aAAa,EAAEC,aAAa,CAAC,CAAC,CAAC,CAAC;;EAEpD,oBACEN,OAAA;IAAAwB,QAAA,gBACExB,OAAA;MAAAwB,QAAA,EAAI;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAEnB5B,OAAA;MAAAwB,QAAA,EAAI;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAGtBpB,YAAY,gBACXR,OAAA;MAAAwB,QAAA,EAAMR,IAAI,CAACC,SAAS,CAACT,YAAY,EAAE,IAAI,EAAE,CAAC;IAAC;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,CAAC;IAAA,eAEnD5B,OAAA;MAAAwB,QAAA,EAAG;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CACtB;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAGE,CAAC;AAEV,CAAC;AAAC1B,EAAA,CA/CID,SAAS;EAAA,QACIH,WAAW;AAAA;AAAA+B,EAAA,GADxB5B,SAAS;AAiDf,eAAeA,SAAS;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}