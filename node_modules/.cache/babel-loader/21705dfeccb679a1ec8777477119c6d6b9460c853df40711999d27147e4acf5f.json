{"ast":null,"code":"var _jsxFileName = \"/Users/widhardwiatmoko/Desktop/TerpantauAman/realtime-client/src/components/finalPage.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from \"react\";\n// import { useLocation } from \"react-router-dom\";\n\n// const FinalPage = () => {\n//   const location = useLocation();\n//   const { section1Values, section2Value, section3Value } = location.state;\n\n//   // State to store the data fetched from the server\n//   const [queryResults, setQueryResults] = useState(null);\n\n//   const metricAliases = {\n//     totalUsers: \"total_users\",\n//     revenue: \"total_revenue\",\n//     eventCount: \"total_events\",\n//     views: \"total_views\",\n//   };\n\n//   useEffect(() => {\n//     if (!section2Value) return; // Don't fetch if metric is not selected\n\n//     const fetchData = async () => {\n//       try {\n//         const response = await fetch(\"http://localhost:3001/query-bigquery\", {\n//           method: \"POST\",\n//           headers: { \"Content-Type\": \"application/json\" },\n//           body: JSON.stringify({\n//             dimensions: section1Values, // Already an array\n//             metric: section2Value,\n//             refreshTime: section3Value,\n//           }),\n//         });\n\n//         const data = await response.json();\n//         setQueryResults(data); // Update state with the fetched data\n//       } catch (error) {\n//         console.error(\"Error fetching data:\", error);\n//         // Handle errors appropriately\n//       }\n//     };\n\n//     fetchData();\n//   }, [section1Values, section2Value, section3Value]);\n\n//   return (\n//     <div>\n//       <h1>Final Page</h1>\n\n//       <h2>Query Results:</h2>\n\n//       {/* Table for displaying results */}\n//       {queryResults && queryResults.length > 0 ? (\n//         <table>\n//           <thead>\n//             <tr>\n//               {/* Dynamically create table headers */}\n//               {section1Values.map((dimension) => (\n//                 <th key={dimension}>{dimension}</th>\n//               ))}\n//               <th>{metricAliases[section2Value]}</th>{\" \"}\n//               {/* Use metric alias here */}\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {queryResults.map((row, rowIndex) => (\n//               <tr key={rowIndex}>\n//                 {/* Dynamically render table cells */}\n//                 {section1Values.map((dimension) => (\n//                   <td key={`${rowIndex}-${dimension}`}>{row[dimension]}</td>\n//                 ))}\n//                 <td>{row[metricAliases[section2Value]]}</td>{\" \"}\n//                 {/* Use metric alias here */}\n//               </tr>\n//             ))}\n//           </tbody>\n//         </table>\n//       ) : (\n//         <p>{queryResults ? \"No data found.\" : \"Loading data...\"}</p>\n//       )}\n\n//       {/* ... (display other selections as before) ... */}\n//     </div>\n//   );\n// };\n\n// export default FinalPage;\n\nimport React, { useEffect, useState } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport { doc, getDoc, setDoc } from \"firebase/firestore\";\nimport db from \"../firebaseConfig\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FinalPage = () => {\n  _s();\n  const location = useLocation();\n  const {\n    reportName\n  } = location.state; // Get reportName from previous page\n\n  const [data, setData] = useState({\n    dimensions: [],\n    metric: null,\n    refreshTime: \"\",\n    queryResults: null,\n    timestamp: null\n  });\n  const metricAliases = {\n    totalUsers: \"total_users\",\n    revenue: \"total_revenue\",\n    eventCount: \"total_events\",\n    views: \"total_views\"\n  };\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const docRef = doc(db, \"Live Report\", reportName);\n        const docSnap = await getDoc(docRef);\n        if (docSnap.exists()) {\n          const firestoreData = docSnap.data();\n          const savedTime = new Date(firestoreData.timestamp);\n          const formattedSavedTime = savedTime.toLocaleString(\"en-GB\", {\n            day: \"2-digit\",\n            month: \"2-digit\",\n            year: \"numeric\",\n            hour: \"2-digit\",\n            minute: \"2-digit\",\n            second: \"2-digit\",\n            hour12: false\n          });\n          const lastRunTime = new Date(firestoreData.dateLastRun || 0); // Default to 0 if not set\n          const formattedLastRunTime = lastRunTime.toLocaleString(\"en-GB\", {\n            day: \"2-digit\",\n            month: \"2-digit\",\n            year: \"numeric\",\n            hour: \"2-digit\",\n            minute: \"2-digit\",\n            second: \"2-digit\",\n            hour12: false\n          });\n          const currentTime = new Date();\n          const refreshTimeInMinutes = parseInt(firestoreData.refreshTime.split(\" \")[0]);\n          const timeDifference = (currentTime - savedTime) / (1000 * 60);\n          const timeSinceLastRun = (currentTime - lastRunTime) / (1000 * 60);\n          if (timeDifference <= refreshTimeInMinutes && timeSinceLastRun <= refreshTimeInMinutes) {\n            // Data is still fresh, use it directly from Firestore\n            setData({\n              ...firestoreData // Use all data from Firestore\n            });\n          } else {\n            // Data is stale or hasn't been run recently, fetch from BigQuery\n            const dimensions = firestoreData.dimensions || [];\n            const metric = firestoreData.metric || null;\n            const refreshTime = firestoreData.refreshTime || \"\";\n            const bqResponse = await fetch(\"http://localhost:3001/query-bigquery\", {\n              method: \"POST\",\n              headers: {\n                \"Content-Type\": \"application/json\"\n              },\n              body: JSON.stringify({\n                dimensions,\n                metric,\n                refreshTime\n              })\n            });\n            const bigqueryData = await bqResponse.json();\n\n            // Update Firestore with new results, timestamp, and dateLastRun\n            await setDoc(docRef, {\n              ...firestoreData,\n              results: bigqueryData,\n              timestamp: formattedSavedTime,\n              // Already in the desired format\n              dateLastRun: formattedLastRunTime\n            });\n            setData({\n              dimensions,\n              metric,\n              refreshTime,\n              queryResults: bigqueryData,\n              timestamp: formattedSavedTime,\n              dateLastRun: formattedLastRunTime\n            });\n          }\n        } else {\n          console.log(\"No such document!\");\n          // Handle the case where the document doesn't exist\n        }\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      }\n    };\n    fetchData();\n  }, [reportName]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Final Page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [reportName, \"'s Report\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Query Results:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 7\n    }, this), data.queryResults && data.queryResults.length > 0 ? /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [data.dimensions.map(dimension => /*#__PURE__*/_jsxDEV(\"th\", {\n            children: dimension\n          }, dimension, false, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 17\n          }, this)), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: metricAliases[data.metric]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: data.queryResults.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [data.dimensions.map(dimension => /*#__PURE__*/_jsxDEV(\"td\", {\n            children: row[dimension]\n          }, `${rowIndex}-${dimension}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 19\n          }, this)), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: row[metricAliases[data.metric]]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 17\n          }, this)]\n        }, rowIndex, true, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: data.queryResults ? \"No data found.\" : \"Loading data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 209,\n    columnNumber: 5\n  }, this);\n};\n_s(FinalPage, \"jiTtisCMisXt9QoGS/0qj8pNwKs=\", false, function () {\n  return [useLocation];\n});\n_c = FinalPage;\nexport default FinalPage;\nvar _c;\n$RefreshReg$(_c, \"FinalPage\");","map":{"version":3,"names":["React","useEffect","useState","useLocation","doc","getDoc","setDoc","db","jsxDEV","_jsxDEV","FinalPage","_s","location","reportName","state","data","setData","dimensions","metric","refreshTime","queryResults","timestamp","metricAliases","totalUsers","revenue","eventCount","views","fetchData","docRef","docSnap","exists","firestoreData","savedTime","Date","formattedSavedTime","toLocaleString","day","month","year","hour","minute","second","hour12","lastRunTime","dateLastRun","formattedLastRunTime","currentTime","refreshTimeInMinutes","parseInt","split","timeDifference","timeSinceLastRun","bqResponse","fetch","method","headers","body","JSON","stringify","bigqueryData","json","results","console","log","error","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","dimension","row","rowIndex","_c","$RefreshReg$"],"sources":["/Users/widhardwiatmoko/Desktop/TerpantauAman/realtime-client/src/components/finalPage.js"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\n// import { useLocation } from \"react-router-dom\";\n\n// const FinalPage = () => {\n//   const location = useLocation();\n//   const { section1Values, section2Value, section3Value } = location.state;\n\n//   // State to store the data fetched from the server\n//   const [queryResults, setQueryResults] = useState(null);\n\n//   const metricAliases = {\n//     totalUsers: \"total_users\",\n//     revenue: \"total_revenue\",\n//     eventCount: \"total_events\",\n//     views: \"total_views\",\n//   };\n\n//   useEffect(() => {\n//     if (!section2Value) return; // Don't fetch if metric is not selected\n\n//     const fetchData = async () => {\n//       try {\n//         const response = await fetch(\"http://localhost:3001/query-bigquery\", {\n//           method: \"POST\",\n//           headers: { \"Content-Type\": \"application/json\" },\n//           body: JSON.stringify({\n//             dimensions: section1Values, // Already an array\n//             metric: section2Value,\n//             refreshTime: section3Value,\n//           }),\n//         });\n\n//         const data = await response.json();\n//         setQueryResults(data); // Update state with the fetched data\n//       } catch (error) {\n//         console.error(\"Error fetching data:\", error);\n//         // Handle errors appropriately\n//       }\n//     };\n\n//     fetchData();\n//   }, [section1Values, section2Value, section3Value]);\n\n//   return (\n//     <div>\n//       <h1>Final Page</h1>\n\n//       <h2>Query Results:</h2>\n\n//       {/* Table for displaying results */}\n//       {queryResults && queryResults.length > 0 ? (\n//         <table>\n//           <thead>\n//             <tr>\n//               {/* Dynamically create table headers */}\n//               {section1Values.map((dimension) => (\n//                 <th key={dimension}>{dimension}</th>\n//               ))}\n//               <th>{metricAliases[section2Value]}</th>{\" \"}\n//               {/* Use metric alias here */}\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {queryResults.map((row, rowIndex) => (\n//               <tr key={rowIndex}>\n//                 {/* Dynamically render table cells */}\n//                 {section1Values.map((dimension) => (\n//                   <td key={`${rowIndex}-${dimension}`}>{row[dimension]}</td>\n//                 ))}\n//                 <td>{row[metricAliases[section2Value]]}</td>{\" \"}\n//                 {/* Use metric alias here */}\n//               </tr>\n//             ))}\n//           </tbody>\n//         </table>\n//       ) : (\n//         <p>{queryResults ? \"No data found.\" : \"Loading data...\"}</p>\n//       )}\n\n//       {/* ... (display other selections as before) ... */}\n//     </div>\n//   );\n// };\n\n// export default FinalPage;\n\nimport React, { useEffect, useState } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport { doc, getDoc, setDoc } from \"firebase/firestore\";\nimport db from \"../firebaseConfig\";\n\nconst FinalPage = () => {\n  const location = useLocation();\n  const { reportName } = location.state; // Get reportName from previous page\n\n  const [data, setData] = useState({\n    dimensions: [],\n    metric: null,\n    refreshTime: \"\",\n    queryResults: null,\n    timestamp: null,\n  });\n\n  const metricAliases = {\n    totalUsers: \"total_users\",\n    revenue: \"total_revenue\",\n    eventCount: \"total_events\",\n    views: \"total_views\",\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const docRef = doc(db, \"Live Report\", reportName);\n        const docSnap = await getDoc(docRef);\n\n        if (docSnap.exists()) {\n          const firestoreData = docSnap.data();\n\n          const savedTime = new Date(firestoreData.timestamp);\n          const formattedSavedTime = savedTime.toLocaleString(\"en-GB\", {\n            day: \"2-digit\",\n            month: \"2-digit\",\n            year: \"numeric\",\n            hour: \"2-digit\",\n            minute: \"2-digit\",\n            second: \"2-digit\",\n            hour12: false,\n          });\n\n          const lastRunTime = new Date(firestoreData.dateLastRun || 0); // Default to 0 if not set\n          const formattedLastRunTime = lastRunTime.toLocaleString(\"en-GB\", {\n            day: \"2-digit\",\n            month: \"2-digit\",\n            year: \"numeric\",\n            hour: \"2-digit\",\n            minute: \"2-digit\",\n            second: \"2-digit\",\n            hour12: false,\n          });\n\n          const currentTime = new Date();\n          const refreshTimeInMinutes = parseInt(\n            firestoreData.refreshTime.split(\" \")[0]\n          );\n\n          const timeDifference = (currentTime - savedTime) / (1000 * 60);\n          const timeSinceLastRun = (currentTime - lastRunTime) / (1000 * 60);\n\n          if (\n            timeDifference <= refreshTimeInMinutes &&\n            timeSinceLastRun <= refreshTimeInMinutes\n          ) {\n            // Data is still fresh, use it directly from Firestore\n            setData({\n              ...firestoreData, // Use all data from Firestore\n            });\n          } else {\n            // Data is stale or hasn't been run recently, fetch from BigQuery\n            const dimensions = firestoreData.dimensions || [];\n            const metric = firestoreData.metric || null;\n            const refreshTime = firestoreData.refreshTime || \"\";\n\n            const bqResponse = await fetch(\n              \"http://localhost:3001/query-bigquery\",\n              {\n                method: \"POST\",\n                headers: { \"Content-Type\": \"application/json\" },\n                body: JSON.stringify({\n                  dimensions,\n                  metric,\n                  refreshTime,\n                }),\n              }\n            );\n\n            const bigqueryData = await bqResponse.json();\n\n            // Update Firestore with new results, timestamp, and dateLastRun\n            await setDoc(docRef, {\n              ...firestoreData,\n              results: bigqueryData,\n              timestamp: formattedSavedTime, // Already in the desired format\n              dateLastRun: formattedLastRunTime,\n            });\n\n            setData({\n              dimensions,\n              metric,\n              refreshTime,\n              queryResults: bigqueryData,\n              timestamp: formattedSavedTime,\n              dateLastRun: formattedLastRunTime,\n            });\n          }\n        } else {\n          console.log(\"No such document!\");\n          // Handle the case where the document doesn't exist\n        }\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      }\n    };\n\n    fetchData();\n  }, [reportName]);\n\n  return (\n    <div>\n      <h1>Final Page</h1>\n      <h2>{reportName}'s Report</h2>{\" \"}\n      {/* Display the reportName from location.state */}\n      <h2>Query Results:</h2>\n      {/* Table for displaying results */}\n      {data.queryResults && data.queryResults.length > 0 ? (\n        <table>\n          <thead>\n            <tr>\n              {/* Dynamically create table headers */}\n              {data.dimensions.map((dimension) => (\n                <th key={dimension}>{dimension}</th>\n              ))}\n              <th>{metricAliases[data.metric]}</th>\n            </tr>\n          </thead>\n          <tbody>\n            {data.queryResults.map((row, rowIndex) => (\n              <tr key={rowIndex}>\n                {/* Dynamically render table cells */}\n                {data.dimensions.map((dimension) => (\n                  <td key={`${rowIndex}-${dimension}`}>{row[dimension]}</td>\n                ))}\n                <td>{row[metricAliases[data.metric]]}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      ) : (\n        <p>{data.queryResults ? \"No data found.\" : \"Loading data...\"}</p>\n      )}\n    </div>\n  );\n};\n\nexport default FinalPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}