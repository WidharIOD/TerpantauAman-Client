{"ast":null,"code":"var _jsxFileName = \"/Users/widhardwiatmoko/Desktop/TerpantauAman/realtime-client/src/components/UserInfoPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useNavigate, useLocation } from \"react-router-dom\";\nimport { addDoc, doc, setDoc, collection, getDocs } from \"firebase/firestore\";\nimport { db } from \"../firebaseConfig\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserInfoPage = () => {\n  _s();\n  var _location$state, _location$state2, _location$state3;\n  const navigate = useNavigate();\n  const location = useLocation();\n  const fileData = location.state;\n\n  // Retrieve values from previous steps\n  const dimensions = ((_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.dimensions) || [];\n  const metric = ((_location$state2 = location.state) === null || _location$state2 === void 0 ? void 0 : _location$state2.metric) || null;\n  const refreshTime = ((_location$state3 = location.state) === null || _location$state3 === void 0 ? void 0 : _location$state3.refreshTime) || \"\";\n  //   const [dimensions, setDimensions] = useState([]);\n  //   const [metric, setMetric] = useState(null);\n  //   const [refreshTime, setRefreshTime] = useState(\"\");\n\n  const [reportName, setUserName] = useState(\"\"); // State for user's name\n  const [isLoading, setIsLoading] = useState(false); // Loading state\n\n  const [queryResults, setQueryResults] = useState(null);\n  const handleSubmit = async () => {\n    // setDimensions(fileData.dimensions || []);\n    // setMetric(fileData.metric || null);\n    // setRefreshTime(fileData.refreshTime || \"\");\n    // setUserName(fileData.reportName || \"\");\n\n    if (!metric) return; // Don't fetch if metric is missing\n    if (reportName.trim() === \"\") {\n      // Basic validation (check for empty name)\n      alert(\"Please enter your name.\");\n      return;\n    }\n    setIsLoading(true); // Set loading state\n    const currentDateTime = new Date().toLocaleString(\"en-GB\", {\n      year: \"numeric\",\n      month: \"2-digit\",\n      day: \"2-digit\",\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n      second: \"2-digit\",\n      hour12: false // Use 24-hour format\n    });\n    try {\n      // Fetch data from BigQuery\n      // const res = await fetch(\"http://localhost:3001/query-bigquery\", {\n      //   method: \"POST\",\n      //   headers: { \"Content-Type\": \"application/json\" },\n      //   body: JSON.stringify({\n      //     dimensions,\n      //     metric,\n      //     refreshTime,\n      //   }),\n      // });\n      // const bigqueryData = await res.json();\n\n      // Add reportName and selection details to the data\n      const dataToSave = {\n        reportName,\n        dimensions,\n        metric,\n        refreshTime,\n        // results: bigqueryData,\n        timestamp: currentDateTime\n      };\n\n      // **Wait for the first fetch to complete before the second one**\n      // Save to Google Cloud Storage\n      // const response = await fetch(\"http://localhost:3001/save-to-gcs\", {\n      //   method: \"POST\",\n      //   headers: { \"Content-Type\": \"application/json\" },\n      //   body: JSON.stringify(dataToSave),\n      // });\n\n      // await response.json();\n      //   console.log(data);\n\n      // Save to Firestore\n      await setDoc(doc(db, \"Live Reports\", reportName), dataToSave);\n      console.log(\"Document written with ID: \", reportName);\n\n      // const docRef = await addDoc(collection(db, \"reports\"), dataToSave);\n      // console.log(\"Document written with ID: \", docRef.id);\n\n      navigate(\"/confirmation\", {\n        state: dataToSave\n      });\n    } catch (error) {\n      console.error(\"Error:\", error);\n      // Handle errors appropriately (e.g., display error messages to the user)\n    } finally {\n      setIsLoading(false); // Reset loading state\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"User Information\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"reportName\",\n      children: \"Enter your name:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      id: \"reportName\",\n      value: reportName,\n      onChange: e => setUserName(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSubmit,\n      disabled: isLoading,\n      children: isLoading ? \"Processing...\" : \"Proceed to Results\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n};\n_s(UserInfoPage, \"Jw+rfJW85RaF6Gwmoqa+8x/Utmk=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = UserInfoPage;\nexport default UserInfoPage;\nvar _c;\n$RefreshReg$(_c, \"UserInfoPage\");","map":{"version":3,"names":["React","useState","useNavigate","useLocation","addDoc","doc","setDoc","collection","getDocs","db","jsxDEV","_jsxDEV","UserInfoPage","_s","_location$state","_location$state2","_location$state3","navigate","location","fileData","state","dimensions","metric","refreshTime","reportName","setUserName","isLoading","setIsLoading","queryResults","setQueryResults","handleSubmit","trim","alert","currentDateTime","Date","toLocaleString","year","month","day","hour","minute","second","hour12","dataToSave","timestamp","console","log","error","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","type","id","value","onChange","e","target","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/widhardwiatmoko/Desktop/TerpantauAman/realtime-client/src/components/UserInfoPage.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { useNavigate, useLocation } from \"react-router-dom\";\nimport { addDoc, doc, setDoc, collection, getDocs } from \"firebase/firestore\";\nimport { db } from \"../firebaseConfig\";\n\nconst UserInfoPage = () => {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const fileData = location.state;\n\n  // Retrieve values from previous steps\n  const dimensions = location.state?.dimensions || [];\n  const metric = location.state?.metric || null;\n  const refreshTime = location.state?.refreshTime || \"\";\n  //   const [dimensions, setDimensions] = useState([]);\n  //   const [metric, setMetric] = useState(null);\n  //   const [refreshTime, setRefreshTime] = useState(\"\");\n\n  const [reportName, setUserName] = useState(\"\"); // State for user's name\n  const [isLoading, setIsLoading] = useState(false); // Loading state\n\n  const [queryResults, setQueryResults] = useState(null);\n\n  const handleSubmit = async () => {\n    // setDimensions(fileData.dimensions || []);\n    // setMetric(fileData.metric || null);\n    // setRefreshTime(fileData.refreshTime || \"\");\n    // setUserName(fileData.reportName || \"\");\n\n    if (!metric) return; // Don't fetch if metric is missing\n    if (reportName.trim() === \"\") {\n      // Basic validation (check for empty name)\n      alert(\"Please enter your name.\");\n      return;\n    }\n    setIsLoading(true); // Set loading state\n    const currentDateTime = new Date().toLocaleString(\"en-GB\", {\n      year: \"numeric\",\n      month: \"2-digit\",\n      day: \"2-digit\",\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n      second: \"2-digit\",\n      hour12: false, // Use 24-hour format\n    });\n\n    try {\n      // Fetch data from BigQuery\n      // const res = await fetch(\"http://localhost:3001/query-bigquery\", {\n      //   method: \"POST\",\n      //   headers: { \"Content-Type\": \"application/json\" },\n      //   body: JSON.stringify({\n      //     dimensions,\n      //     metric,\n      //     refreshTime,\n      //   }),\n      // });\n      // const bigqueryData = await res.json();\n\n      // Add reportName and selection details to the data\n      const dataToSave = {\n        reportName,\n        dimensions,\n        metric,\n        refreshTime,\n        // results: bigqueryData,\n        timestamp: currentDateTime,\n      };\n\n      // **Wait for the first fetch to complete before the second one**\n      // Save to Google Cloud Storage\n      // const response = await fetch(\"http://localhost:3001/save-to-gcs\", {\n      //   method: \"POST\",\n      //   headers: { \"Content-Type\": \"application/json\" },\n      //   body: JSON.stringify(dataToSave),\n      // });\n\n      // await response.json();\n      //   console.log(data);\n\n      // Save to Firestore\n      await setDoc(doc(db, \"Live Reports\", reportName), dataToSave);\n\n      console.log(\"Document written with ID: \", reportName);\n\n      // const docRef = await addDoc(collection(db, \"reports\"), dataToSave);\n      // console.log(\"Document written with ID: \", docRef.id);\n\n      navigate(\"/confirmation\", { state: dataToSave });\n    } catch (error) {\n      console.error(\"Error:\", error);\n      // Handle errors appropriately (e.g., display error messages to the user)\n    } finally {\n      setIsLoading(false); // Reset loading state\n    }\n  };\n\n  return (\n    <div>\n      <h1>User Information</h1>\n      <label htmlFor=\"reportName\">Enter your name:</label>\n      <input\n        type=\"text\"\n        id=\"reportName\"\n        value={reportName}\n        onChange={(e) => setUserName(e.target.value)}\n      />\n      <button onClick={handleSubmit} disabled={isLoading}>\n        {isLoading ? \"Processing...\" : \"Proceed to Results\"}\n      </button>\n    </div>\n  );\n};\n\nexport default UserInfoPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}