{"ast":null,"code":"var _jsxFileName = \"/Users/widhardwiatmoko/Desktop/TerpantauAman/realtime-client/src/components/ConfirmationPage.js\",\n  _s = $RefreshSig$();\n// import React from \"react\";\n// import { useLocation, useNavigate } from \"react-router-dom\";\n\n// const ConfirmationPage = () => {\n//   const location = useLocation();\n//   const { dimensions, metric, refreshTime, reportName } = location.state;\n//   const navigate = useNavigate();\n\n//   const handleSubmit = () => {\n//     // Pass all data to the FinalPage\n//     navigate(\"/final\", { state: location.state });\n//   };\n\n//   //   const handleSubmit = async () => {\n//   //     try {\n//   //       // Send data to backend to be saved to GCS\n//   //       const response = await fetch(\"http://localhost:3001/save-to-gcs\", {\n//   //         method: \"POST\",\n//   //         headers: { \"Content-Type\": \"application/json\" },\n//   //         body: JSON.stringify(location.state),\n//   //       });\n\n//   //       const data = await response.json();\n//   //       console.log(data); // Log the response from the server (optional)\n\n//   //       // After saving, you can navigate to the FinalPage or elsewhere\n//   //       navigate(\"/final\", { state: location.state });\n//   //     } catch (error) {\n//   //       console.error(\"Error saving data:\", error);\n//   //       // Handle the error (e.g., display an error message to the user)\n//   //     }\n//   //   };\n\n//   return (\n//     <div>\n//       <h1>Confirm Your Selections</h1>\n//       <h2>Dimensions:</h2>\n//       <ul>\n//         {dimensions.map((value, index) => (\n//           <li key={index}>{value}</li>\n//         ))}\n//       </ul>\n//       <p>Metric: {metric}</p>\n//       <p>Refresh Time: {refreshTime}</p>\n//       <p>User Name: {reportName}</p>\n//       <button onClick={handleSubmit}>Proceed to Results</button>\n//     </div>\n//   );\n// };\n\n// export default ConfirmationPage;\n\nimport React, { useEffect, useState } from \"react\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConfirmationPage = () => {\n  _s();\n  const navigate = useNavigate();\n  const location = useLocation();\n  const [fileList, setFileList] = useState([]); // State to store the file list\n\n  useEffect(() => {\n    // Fetch the file list when the component mounts\n    const fetchFileList = async () => {\n      try {\n        const response = await fetch(\"http://localhost:3001/list-files\");\n        const data = await response.json();\n        setFileList(data.files); // Assuming the backend returns an array named 'files'\n      } catch (error) {\n        console.error(\"Error fetching file list:\", error);\n        // Handle error (e.g., display an error message)\n      }\n    };\n    fetchFileList();\n  }, []); // Empty dependency array ensures this runs only once\n  const handleFileClick = async fileName => {\n    try {\n      const response = await fetch(`http://localhost:3001/get-file/${fileName}`);\n      const fileData = await response.json();\n      navigate(\"/final\", {\n        state: fileData\n      }); // Pass the file data to FinalPage\n    } catch (error) {\n      console.error(\"Error fetching file data:\", error);\n      // Handle error\n    }\n  };\n  const handleSubmit = () => {\n    navigate(\"/final\", {\n      state: location.state\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"List of Files in Cloud Storage\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), fileList.length > 0 ?\n    /*#__PURE__*/\n    // Conditionally render the table\n    _jsxDEV(\"table\", {\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: fileList.map((file, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          onClick: () => handleFileClick(file.name) // Add click handler\n          ,\n          style: {\n            cursor: \"pointer\"\n          } // Make the row look clickable\n          ,\n          children: /*#__PURE__*/_jsxDEV(\"td\", {\n            children: file.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 17\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No files found.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n};\n_s(ConfirmationPage, \"Mb2SRihaHzsRJp/Da2USRb5p88E=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = ConfirmationPage;\nexport default ConfirmationPage;\nvar _c;\n$RefreshReg$(_c, \"ConfirmationPage\");","map":{"version":3,"names":["React","useEffect","useState","useLocation","useNavigate","jsxDEV","_jsxDEV","ConfirmationPage","_s","navigate","location","fileList","setFileList","fetchFileList","response","fetch","data","json","files","error","console","handleFileClick","fileName","fileData","state","handleSubmit","children","_jsxFileName","lineNumber","columnNumber","length","map","file","index","onClick","name","style","cursor","_c","$RefreshReg$"],"sources":["/Users/widhardwiatmoko/Desktop/TerpantauAman/realtime-client/src/components/ConfirmationPage.js"],"sourcesContent":["// import React from \"react\";\n// import { useLocation, useNavigate } from \"react-router-dom\";\n\n// const ConfirmationPage = () => {\n//   const location = useLocation();\n//   const { dimensions, metric, refreshTime, reportName } = location.state;\n//   const navigate = useNavigate();\n\n//   const handleSubmit = () => {\n//     // Pass all data to the FinalPage\n//     navigate(\"/final\", { state: location.state });\n//   };\n\n//   //   const handleSubmit = async () => {\n//   //     try {\n//   //       // Send data to backend to be saved to GCS\n//   //       const response = await fetch(\"http://localhost:3001/save-to-gcs\", {\n//   //         method: \"POST\",\n//   //         headers: { \"Content-Type\": \"application/json\" },\n//   //         body: JSON.stringify(location.state),\n//   //       });\n\n//   //       const data = await response.json();\n//   //       console.log(data); // Log the response from the server (optional)\n\n//   //       // After saving, you can navigate to the FinalPage or elsewhere\n//   //       navigate(\"/final\", { state: location.state });\n//   //     } catch (error) {\n//   //       console.error(\"Error saving data:\", error);\n//   //       // Handle the error (e.g., display an error message to the user)\n//   //     }\n//   //   };\n\n//   return (\n//     <div>\n//       <h1>Confirm Your Selections</h1>\n//       <h2>Dimensions:</h2>\n//       <ul>\n//         {dimensions.map((value, index) => (\n//           <li key={index}>{value}</li>\n//         ))}\n//       </ul>\n//       <p>Metric: {metric}</p>\n//       <p>Refresh Time: {refreshTime}</p>\n//       <p>User Name: {reportName}</p>\n//       <button onClick={handleSubmit}>Proceed to Results</button>\n//     </div>\n//   );\n// };\n\n// export default ConfirmationPage;\n\nimport React, { useEffect, useState } from \"react\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\n\nconst ConfirmationPage = () => {\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  const [fileList, setFileList] = useState([]); // State to store the file list\n\n  useEffect(() => {\n    // Fetch the file list when the component mounts\n    const fetchFileList = async () => {\n      try {\n        const response = await fetch(\"http://localhost:3001/list-files\");\n        const data = await response.json();\n        setFileList(data.files); // Assuming the backend returns an array named 'files'\n      } catch (error) {\n        console.error(\"Error fetching file list:\", error);\n        // Handle error (e.g., display an error message)\n      }\n    };\n\n    fetchFileList();\n  }, []); // Empty dependency array ensures this runs only once\n  const handleFileClick = async (fileName) => {\n    try {\n      const response = await fetch(\n        `http://localhost:3001/get-file/${fileName}`\n      );\n      const fileData = await response.json();\n      navigate(\"/final\", { state: fileData }); // Pass the file data to FinalPage\n    } catch (error) {\n      console.error(\"Error fetching file data:\", error);\n      // Handle error\n    }\n  };\n\n  const handleSubmit = () => {\n    navigate(\"/final\", { state: location.state });\n  };\n\n  return (\n    <div>\n      <h1>List of Files in Cloud Storage</h1>\n\n      {fileList.length > 0 ? ( // Conditionally render the table\n        <table>\n          <tbody>\n            {fileList.map((file, index) => (\n              <tr\n                key={index}\n                onClick={() => handleFileClick(file.name)} // Add click handler\n                style={{ cursor: \"pointer\" }} // Make the row look clickable\n              >\n                <td>{file.name}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      ) : (\n        <p>No files found.</p>\n      )}\n\n      {/* ... (rest of your confirmation page content, e.g., selections, button) ... */}\n    </div>\n  );\n};\n\nexport default ConfirmationPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}