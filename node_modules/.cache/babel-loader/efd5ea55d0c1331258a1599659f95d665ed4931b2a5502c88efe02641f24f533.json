{"ast":null,"code":"var _jsxFileName = \"/Users/widhardwiatmoko/Desktop/TerpantauAman/realtime-client/src/components/UserInfoPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useNavigate, useLocation } from \"react-router-dom\";\nimport { addDoc, doc, setDoc, collection, getDocs } from \"firebase/firestore\";\nimport db from \"../firebaseConfig\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserInfoPage = () => {\n  _s();\n  const navigate = useNavigate();\n  const location = useLocation();\n  const fileData = location.state;\n\n  // Retrieve values from previous steps\n  // const dimensions = location.state?.dimensions || [];\n  // const metric = location.state?.metric || null;\n  // const refreshTime = location.state?.refreshTime || \"\";\n  //   const [dimensions, setDimensions] = useState([]);\n  //   const [metric, setMetric] = useState(null);\n  //   const [refreshTime, setRefreshTime] = useState(\"\");\n\n  const {\n    dimensions,\n    metric,\n    refreshTime,\n    isEditing,\n    reportName: initialReportName\n  } = location.state || {};\n  const [reportName, setUserName] = useState(\"\"); // State for user's name\n  const [isLoading, setIsLoading] = useState(false); // Loading state\n\n  const [queryResults, setQueryResults] = useState(null);\n  useEffect(() => {\n    if (isEditing && initialReportName) {\n      const fetchData = async () => {\n        try {\n          const docRef = doc(db, \"Live Report\", initialReportName);\n          const docSnap = await getDoc(docRef);\n          if (docSnap.exists()) {\n            const reportData = docSnap.data();\n            setUserName(reportData.reportName);\n          } else {\n            console.log(\"No such document!\");\n          }\n        } catch (error) {\n          console.error(\"Error fetching data:\", error);\n        }\n      };\n      fetchData();\n    }\n  }, [isEditing, initialReportName]);\n  const handleSubmit = async () => {\n    // setDimensions(fileData.dimensions || []);\n    // setMetric(fileData.metric || null);\n    // setRefreshTime(fileData.refreshTime || \"\");\n    // setUserName(fileData.reportName || \"\");\n\n    if (!metric) return; // Don't fetch if metric is missing\n    if (reportName.trim() === \"\") {\n      // Basic validation (check for empty name)\n      alert(\"Please enter your name.\");\n      return;\n    }\n    setIsLoading(true); // Set loading state\n    const currentDateTime = new Date().toLocaleString(\"en-GB\", {\n      year: \"numeric\",\n      month: \"2-digit\",\n      day: \"2-digit\",\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n      second: \"2-digit\",\n      hour12: false // Use 24-hour format\n    });\n    try {\n      // Fetch data from BigQuery\n      // const res = await fetch(\"http://localhost:3001/query-bigquery\", {\n      //   method: \"POST\",\n      //   headers: { \"Content-Type\": \"application/json\" },\n      //   body: JSON.stringify({\n      //     dimensions,\n      //     metric,\n      //     refreshTime,\n      //   }),\n      // });\n      // const bigqueryData = await res.json();\n\n      // Add reportName and selection details to the data\n      const dataToSave = {\n        reportName,\n        dimensions,\n        metric,\n        refreshTime,\n        // results: bigqueryData,\n        timestamp: currentDateTime,\n        dateLastRun: currentDateTime\n      };\n\n      // **Wait for the first fetch to complete before the second one**\n      // Save to Google Cloud Storage\n      // const response = await fetch(\"http://localhost:3001/save-to-gcs\", {\n      //   method: \"POST\",\n      //   headers: { \"Content-Type\": \"application/json\" },\n      //   body: JSON.stringify(dataToSave),\n      // });\n\n      // await response.json();\n      //   console.log(data);\n\n      // Save to Firestore\n      await setDoc(doc(db, \"Live Report\", reportName), dataToSave);\n      console.log(\"Document written with ID: \", reportName);\n\n      // const docRef = await addDoc(collection(db, \"reports\"), dataToSave);\n      // console.log(\"Document written with ID: \", docRef.id);\n\n      navigate(\"/\", {\n        state: dataToSave\n      });\n    } catch (error) {\n      console.error(\"Error:\", error);\n      // Handle errors appropriately (e.g., display error messages to the user)\n    } finally {\n      setIsLoading(false); // Reset loading state\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"User Information\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"reportName\",\n      children: \"Enter your name:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      id: \"reportName\",\n      value: reportName,\n      onChange: e => setUserName(e.target.value),\n      readOnly: isEditing // Make it read-only in edit mode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSubmit,\n      disabled: isLoading,\n      children: isLoading ? \"Processing...\" : \"Proceed to Results\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 5\n  }, this);\n};\n_s(UserInfoPage, \"RcSCtZTm6HlEvH2F6TDHMaG483c=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = UserInfoPage;\nexport default UserInfoPage;\nvar _c;\n$RefreshReg$(_c, \"UserInfoPage\");","map":{"version":3,"names":["React","useState","useNavigate","useLocation","addDoc","doc","setDoc","collection","getDocs","db","jsxDEV","_jsxDEV","UserInfoPage","_s","navigate","location","fileData","state","dimensions","metric","refreshTime","isEditing","reportName","initialReportName","setUserName","isLoading","setIsLoading","queryResults","setQueryResults","useEffect","fetchData","docRef","docSnap","getDoc","exists","reportData","data","console","log","error","handleSubmit","trim","alert","currentDateTime","Date","toLocaleString","year","month","day","hour","minute","second","hour12","dataToSave","timestamp","dateLastRun","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","type","id","value","onChange","e","target","readOnly","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/widhardwiatmoko/Desktop/TerpantauAman/realtime-client/src/components/UserInfoPage.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { useNavigate, useLocation } from \"react-router-dom\";\nimport { addDoc, doc, setDoc, collection, getDocs } from \"firebase/firestore\";\nimport db from \"../firebaseConfig\";\n\nconst UserInfoPage = () => {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const fileData = location.state;\n\n  // Retrieve values from previous steps\n  // const dimensions = location.state?.dimensions || [];\n  // const metric = location.state?.metric || null;\n  // const refreshTime = location.state?.refreshTime || \"\";\n  //   const [dimensions, setDimensions] = useState([]);\n  //   const [metric, setMetric] = useState(null);\n  //   const [refreshTime, setRefreshTime] = useState(\"\");\n\n  const {\n    dimensions,\n    metric,\n    refreshTime,\n    isEditing,\n    reportName: initialReportName,\n  } = location.state || {};\n\n  const [reportName, setUserName] = useState(\"\"); // State for user's name\n  const [isLoading, setIsLoading] = useState(false); // Loading state\n\n  const [queryResults, setQueryResults] = useState(null);\n\n  useEffect(() => {\n    if (isEditing && initialReportName) {\n      const fetchData = async () => {\n        try {\n          const docRef = doc(db, \"Live Report\", initialReportName);\n          const docSnap = await getDoc(docRef);\n\n          if (docSnap.exists()) {\n            const reportData = docSnap.data();\n            setUserName(reportData.reportName);\n          } else {\n            console.log(\"No such document!\");\n          }\n        } catch (error) {\n          console.error(\"Error fetching data:\", error);\n        }\n      };\n\n      fetchData();\n    }\n  }, [isEditing, initialReportName]);\n\n  const handleSubmit = async () => {\n    // setDimensions(fileData.dimensions || []);\n    // setMetric(fileData.metric || null);\n    // setRefreshTime(fileData.refreshTime || \"\");\n    // setUserName(fileData.reportName || \"\");\n\n    if (!metric) return; // Don't fetch if metric is missing\n    if (reportName.trim() === \"\") {\n      // Basic validation (check for empty name)\n      alert(\"Please enter your name.\");\n      return;\n    }\n    setIsLoading(true); // Set loading state\n    const currentDateTime = new Date().toLocaleString(\"en-GB\", {\n      year: \"numeric\",\n      month: \"2-digit\",\n      day: \"2-digit\",\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n      second: \"2-digit\",\n      hour12: false, // Use 24-hour format\n    });\n\n    try {\n      // Fetch data from BigQuery\n      // const res = await fetch(\"http://localhost:3001/query-bigquery\", {\n      //   method: \"POST\",\n      //   headers: { \"Content-Type\": \"application/json\" },\n      //   body: JSON.stringify({\n      //     dimensions,\n      //     metric,\n      //     refreshTime,\n      //   }),\n      // });\n      // const bigqueryData = await res.json();\n\n      // Add reportName and selection details to the data\n      const dataToSave = {\n        reportName,\n        dimensions,\n        metric,\n        refreshTime,\n        // results: bigqueryData,\n        timestamp: currentDateTime,\n        dateLastRun: currentDateTime,\n      };\n\n      // **Wait for the first fetch to complete before the second one**\n      // Save to Google Cloud Storage\n      // const response = await fetch(\"http://localhost:3001/save-to-gcs\", {\n      //   method: \"POST\",\n      //   headers: { \"Content-Type\": \"application/json\" },\n      //   body: JSON.stringify(dataToSave),\n      // });\n\n      // await response.json();\n      //   console.log(data);\n\n      // Save to Firestore\n      await setDoc(doc(db, \"Live Report\", reportName), dataToSave);\n\n      console.log(\"Document written with ID: \", reportName);\n\n      // const docRef = await addDoc(collection(db, \"reports\"), dataToSave);\n      // console.log(\"Document written with ID: \", docRef.id);\n\n      navigate(\"/\", { state: dataToSave });\n    } catch (error) {\n      console.error(\"Error:\", error);\n      // Handle errors appropriately (e.g., display error messages to the user)\n    } finally {\n      setIsLoading(false); // Reset loading state\n    }\n  };\n\n  return (\n    <div>\n      <h1>User Information</h1>\n      <label htmlFor=\"reportName\">Enter your name:</label>\n      <input\n        type=\"text\"\n        id=\"reportName\"\n        value={reportName}\n        onChange={(e) => setUserName(e.target.value)}\n        readOnly={isEditing} // Make it read-only in edit mode\n      />\n      <button onClick={handleSubmit} disabled={isLoading}>\n        {isLoading ? \"Processing...\" : \"Proceed to Results\"}\n      </button>\n    </div>\n  );\n};\n\nexport default UserInfoPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}