{"ast":null,"code":"var _jsxFileName = \"/Users/widhardwiatmoko/Desktop/TerpantauAman/realtime-client/src/components/ConfirmationPage.js\",\n  _s = $RefreshSig$();\n// import React from \"react\";\n// import { useLocation, useNavigate } from \"react-router-dom\";\n\n// const ConfirmationPage = () => {\n//   const location = useLocation();\n//   const { dimensions, metric, refreshTime, reportName } = location.state;\n//   const navigate = useNavigate();\n\n//   const handleSubmit = () => {\n//     // Pass all data to the FinalPage\n//     navigate(\"/final\", { state: location.state });\n//   };\n\n//   //   const handleSubmit = async () => {\n//   //     try {\n//   //       // Send data to backend to be saved to GCS\n//   //       const response = await fetch(\"http://localhost:3001/save-to-gcs\", {\n//   //         method: \"POST\",\n//   //         headers: { \"Content-Type\": \"application/json\" },\n//   //         body: JSON.stringify(location.state),\n//   //       });\n\n//   //       const data = await response.json();\n//   //       console.log(data); // Log the response from the server (optional)\n\n//   //       // After saving, you can navigate to the FinalPage or elsewhere\n//   //       navigate(\"/final\", { state: location.state });\n//   //     } catch (error) {\n//   //       console.error(\"Error saving data:\", error);\n//   //       // Handle the error (e.g., display an error message to the user)\n//   //     }\n//   //   };\n\n//   return (\n//     <div>\n//       <h1>Confirm Your Selections</h1>\n//       <h2>Dimensions:</h2>\n//       <ul>\n//         {dimensions.map((value, index) => (\n//           <li key={index}>{value}</li>\n//         ))}\n//       </ul>\n//       <p>Metric: {metric}</p>\n//       <p>Refresh Time: {refreshTime}</p>\n//       <p>User Name: {reportName}</p>\n//       <button onClick={handleSubmit}>Proceed to Results</button>\n//     </div>\n//   );\n// };\n\n// export default ConfirmationPage;\n\n// import React, { useEffect, useState } from \"react\";\n// import { useLocation, useNavigate } from \"react-router-dom\";\n\n// const ConfirmationPage = () => {\n//   const navigate = useNavigate();\n//   const location = useLocation();\n\n//   const [fileList, setFileList] = useState([]); // State to store the file list\n\n//   useEffect(() => {\n//     // Fetch the file list when the component mounts\n//     const fetchFileList = async () => {\n//       try {\n//         const response = await fetch(\"http://localhost:3001/list-files\");\n//         const data = await response.json();\n//         setFileList(data.files); // Assuming the backend returns an array named 'files'\n//       } catch (error) {\n//         console.error(\"Error fetching file list:\", error);\n//         // Handle error (e.g., display an error message)\n//       }\n//     };\n\n//     fetchFileList();\n//   }, []); // Empty dependency array ensures this runs only once\n//   const handleFileClick = async (fileName) => {\n//     try {\n//       const response = await fetch(\n//         `http://localhost:3001/get-file/${fileName}`\n//       );\n//       const fileData = await response.json();\n//       navigate(\"/final\", { state: fileData }); // Pass the file data to FinalPage\n//     } catch (error) {\n//       console.error(\"Error fetching file data:\", error);\n//       // Handle error\n//     }\n//   };\n\n//   const handleSubmit = () => {\n//     navigate(\"/final\", { state: location.state });\n//   };\n\n//   return (\n//     <div>\n//       <h1>List of Files in Cloud Storage</h1>\n\n//       {fileList.length > 0 ? (\n//         <table>\n//           <thead>\n//             <tr>\n//               <th>Filename</th>\n//               <th>Date Created</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {fileList.map((file, index) => (\n//               <tr\n//                 key={index}\n//                 onClick={() => handleFileClick(file.name)}\n//                 style={{ cursor: \"pointer\" }}\n//               >\n//                 <td>{file.name.replace(\".json\", \"\")}</td>{\" \"}\n//                 {/* Remove .json extension */}\n//                 <td>{new Date(file.timeCreated).toLocaleString()}</td>{\" \"}\n//                 {/* Format timestamp */}\n//               </tr>\n//             ))}\n//           </tbody>\n//         </table>\n//       ) : (\n//         <p>No files found.</p>\n//       )}\n\n//       {/* ... (rest of your confirmation page content) ... */}\n//     </div>\n//   );\n// };\n// export default ConfirmationPage;\n\nimport React, { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { collection, getDocs } from \"firebase/firestore\";\nimport db from \"../firebaseConfig\"; // Assuming you have a firebase.js file for configuration\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConfirmationPage = () => {\n  _s();\n  const navigate = useNavigate();\n  const [reportList, setReportList] = useState([]);\n  useEffect(() => {\n    const fetchReports = async () => {\n      try {\n        const querySnapshot = await getDocs(collection(db, \"Live Report\"));\n        const reports = [];\n        querySnapshot.forEach(doc => {\n          const data = doc.data();\n          reports.push({\n            id: doc.id,\n            // Include the document ID\n            reportName: data.reportName,\n            timestamp: data.timestamp,\n            dateLastRun: data.dateLastRun\n          });\n        });\n        setReportList(reports);\n      } catch (error) {\n        console.error(\"Error fetching reports from Firestore:\", error);\n        // Handle error (e.g., display an error message)\n      }\n    };\n    fetchReports();\n  }, []);\n  const handleReportClick = reportData => {\n    navigate(\"/final\", {\n      state: reportData\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"List of Reports in Firestore\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this), reportList.length > 0 ? /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Report Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Date Created\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Date Last Run\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: reportList.map(report => /*#__PURE__*/_jsxDEV(\"tr\", {\n          onClick: () => handleReportClick(report),\n          style: {\n            cursor: \"pointer\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: report.reportName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: report.timestamp\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 17\n          }, this)]\n        }, report.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No reports found.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 169,\n    columnNumber: 5\n  }, this);\n};\n_s(ConfirmationPage, \"Ng0QYXVcq6a3TFRK2R/cC+EhL3c=\", false, function () {\n  return [useNavigate];\n});\n_c = ConfirmationPage;\nexport default ConfirmationPage;\nvar _c;\n$RefreshReg$(_c, \"ConfirmationPage\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","collection","getDocs","db","jsxDEV","_jsxDEV","ConfirmationPage","_s","navigate","reportList","setReportList","fetchReports","querySnapshot","reports","forEach","doc","data","push","id","reportName","timestamp","dateLastRun","error","console","handleReportClick","reportData","state","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","report","onClick","style","cursor","_c","$RefreshReg$"],"sources":["/Users/widhardwiatmoko/Desktop/TerpantauAman/realtime-client/src/components/ConfirmationPage.js"],"sourcesContent":["// import React from \"react\";\n// import { useLocation, useNavigate } from \"react-router-dom\";\n\n// const ConfirmationPage = () => {\n//   const location = useLocation();\n//   const { dimensions, metric, refreshTime, reportName } = location.state;\n//   const navigate = useNavigate();\n\n//   const handleSubmit = () => {\n//     // Pass all data to the FinalPage\n//     navigate(\"/final\", { state: location.state });\n//   };\n\n//   //   const handleSubmit = async () => {\n//   //     try {\n//   //       // Send data to backend to be saved to GCS\n//   //       const response = await fetch(\"http://localhost:3001/save-to-gcs\", {\n//   //         method: \"POST\",\n//   //         headers: { \"Content-Type\": \"application/json\" },\n//   //         body: JSON.stringify(location.state),\n//   //       });\n\n//   //       const data = await response.json();\n//   //       console.log(data); // Log the response from the server (optional)\n\n//   //       // After saving, you can navigate to the FinalPage or elsewhere\n//   //       navigate(\"/final\", { state: location.state });\n//   //     } catch (error) {\n//   //       console.error(\"Error saving data:\", error);\n//   //       // Handle the error (e.g., display an error message to the user)\n//   //     }\n//   //   };\n\n//   return (\n//     <div>\n//       <h1>Confirm Your Selections</h1>\n//       <h2>Dimensions:</h2>\n//       <ul>\n//         {dimensions.map((value, index) => (\n//           <li key={index}>{value}</li>\n//         ))}\n//       </ul>\n//       <p>Metric: {metric}</p>\n//       <p>Refresh Time: {refreshTime}</p>\n//       <p>User Name: {reportName}</p>\n//       <button onClick={handleSubmit}>Proceed to Results</button>\n//     </div>\n//   );\n// };\n\n// export default ConfirmationPage;\n\n// import React, { useEffect, useState } from \"react\";\n// import { useLocation, useNavigate } from \"react-router-dom\";\n\n// const ConfirmationPage = () => {\n//   const navigate = useNavigate();\n//   const location = useLocation();\n\n//   const [fileList, setFileList] = useState([]); // State to store the file list\n\n//   useEffect(() => {\n//     // Fetch the file list when the component mounts\n//     const fetchFileList = async () => {\n//       try {\n//         const response = await fetch(\"http://localhost:3001/list-files\");\n//         const data = await response.json();\n//         setFileList(data.files); // Assuming the backend returns an array named 'files'\n//       } catch (error) {\n//         console.error(\"Error fetching file list:\", error);\n//         // Handle error (e.g., display an error message)\n//       }\n//     };\n\n//     fetchFileList();\n//   }, []); // Empty dependency array ensures this runs only once\n//   const handleFileClick = async (fileName) => {\n//     try {\n//       const response = await fetch(\n//         `http://localhost:3001/get-file/${fileName}`\n//       );\n//       const fileData = await response.json();\n//       navigate(\"/final\", { state: fileData }); // Pass the file data to FinalPage\n//     } catch (error) {\n//       console.error(\"Error fetching file data:\", error);\n//       // Handle error\n//     }\n//   };\n\n//   const handleSubmit = () => {\n//     navigate(\"/final\", { state: location.state });\n//   };\n\n//   return (\n//     <div>\n//       <h1>List of Files in Cloud Storage</h1>\n\n//       {fileList.length > 0 ? (\n//         <table>\n//           <thead>\n//             <tr>\n//               <th>Filename</th>\n//               <th>Date Created</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {fileList.map((file, index) => (\n//               <tr\n//                 key={index}\n//                 onClick={() => handleFileClick(file.name)}\n//                 style={{ cursor: \"pointer\" }}\n//               >\n//                 <td>{file.name.replace(\".json\", \"\")}</td>{\" \"}\n//                 {/* Remove .json extension */}\n//                 <td>{new Date(file.timeCreated).toLocaleString()}</td>{\" \"}\n//                 {/* Format timestamp */}\n//               </tr>\n//             ))}\n//           </tbody>\n//         </table>\n//       ) : (\n//         <p>No files found.</p>\n//       )}\n\n//       {/* ... (rest of your confirmation page content) ... */}\n//     </div>\n//   );\n// };\n// export default ConfirmationPage;\n\nimport React, { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { collection, getDocs } from \"firebase/firestore\";\nimport db from \"../firebaseConfig\"; // Assuming you have a firebase.js file for configuration\n\nconst ConfirmationPage = () => {\n  const navigate = useNavigate();\n  const [reportList, setReportList] = useState([]);\n\n  useEffect(() => {\n    const fetchReports = async () => {\n      try {\n        const querySnapshot = await getDocs(collection(db, \"Live Report\"));\n        const reports = [];\n        querySnapshot.forEach((doc) => {\n          const data = doc.data();\n          reports.push({\n            id: doc.id, // Include the document ID\n            reportName: data.reportName,\n            timestamp: data.timestamp,\n            dateLastRun: data.dateLastRun,\n          });\n        });\n        setReportList(reports);\n      } catch (error) {\n        console.error(\"Error fetching reports from Firestore:\", error);\n        // Handle error (e.g., display an error message)\n      }\n    };\n\n    fetchReports();\n  }, []);\n\n  const handleReportClick = (reportData) => {\n    navigate(\"/final\", { state: reportData });\n  };\n\n  return (\n    <div>\n      <h1>List of Reports in Firestore</h1>\n\n      {reportList.length > 0 ? (\n        <table>\n          <thead>\n            <tr>\n              <th>Report Name</th>\n              <th>Date Created</th>\n              <th>Date Last Run</th>\n            </tr>\n          </thead>\n          <tbody>\n            {reportList.map((report) => (\n              <tr\n                key={report.id}\n                onClick={() => handleReportClick(report)}\n                style={{ cursor: \"pointer\" }}\n              >\n                <td>{report.reportName}</td>\n                <td>{report.timestamp}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      ) : (\n        <p>No reports found.</p>\n      )}\n    </div>\n  );\n};\n\nexport default ConfirmationPage;\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,UAAU,EAAEC,OAAO,QAAQ,oBAAoB;AACxD,OAAOC,EAAE,MAAM,mBAAmB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEpC,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC7B,MAAMC,QAAQ,GAAGR,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACS,UAAU,EAAEC,aAAa,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAEhDD,SAAS,CAAC,MAAM;IACd,MAAMa,YAAY,GAAG,MAAAA,CAAA,KAAY;MAC/B,IAAI;QACF,MAAMC,aAAa,GAAG,MAAMV,OAAO,CAACD,UAAU,CAACE,EAAE,EAAE,aAAa,CAAC,CAAC;QAClE,MAAMU,OAAO,GAAG,EAAE;QAClBD,aAAa,CAACE,OAAO,CAAEC,GAAG,IAAK;UAC7B,MAAMC,IAAI,GAAGD,GAAG,CAACC,IAAI,CAAC,CAAC;UACvBH,OAAO,CAACI,IAAI,CAAC;YACXC,EAAE,EAAEH,GAAG,CAACG,EAAE;YAAE;YACZC,UAAU,EAAEH,IAAI,CAACG,UAAU;YAC3BC,SAAS,EAAEJ,IAAI,CAACI,SAAS;YACzBC,WAAW,EAAEL,IAAI,CAACK;UACpB,CAAC,CAAC;QACJ,CAAC,CAAC;QACFX,aAAa,CAACG,OAAO,CAAC;MACxB,CAAC,CAAC,OAAOS,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,wCAAwC,EAAEA,KAAK,CAAC;QAC9D;MACF;IACF,CAAC;IAEDX,YAAY,CAAC,CAAC;EAChB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMa,iBAAiB,GAAIC,UAAU,IAAK;IACxCjB,QAAQ,CAAC,QAAQ,EAAE;MAAEkB,KAAK,EAAED;IAAW,CAAC,CAAC;EAC3C,CAAC;EAED,oBACEpB,OAAA;IAAAsB,QAAA,gBACEtB,OAAA;MAAAsB,QAAA,EAAI;IAA4B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAEpCtB,UAAU,CAACuB,MAAM,GAAG,CAAC,gBACpB3B,OAAA;MAAAsB,QAAA,gBACEtB,OAAA;QAAAsB,QAAA,eACEtB,OAAA;UAAAsB,QAAA,gBACEtB,OAAA;YAAAsB,QAAA,EAAI;UAAW;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACpB1B,OAAA;YAAAsB,QAAA,EAAI;UAAY;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACrB1B,OAAA;YAAAsB,QAAA,EAAI;UAAa;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACpB;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC,eACR1B,OAAA;QAAAsB,QAAA,EACGlB,UAAU,CAACwB,GAAG,CAAEC,MAAM,iBACrB7B,OAAA;UAEE8B,OAAO,EAAEA,CAAA,KAAMX,iBAAiB,CAACU,MAAM,CAAE;UACzCE,KAAK,EAAE;YAAEC,MAAM,EAAE;UAAU,CAAE;UAAAV,QAAA,gBAE7BtB,OAAA;YAAAsB,QAAA,EAAKO,MAAM,CAACf;UAAU;YAAAS,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eAC5B1B,OAAA;YAAAsB,QAAA,EAAKO,MAAM,CAACd;UAAS;YAAAQ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC;QAAA,GALtBG,MAAM,CAAChB,EAAE;UAAAU,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAMZ,CACL;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,gBAER1B,OAAA;MAAAsB,QAAA,EAAG;IAAiB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CACxB;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACxB,EAAA,CA/DID,gBAAgB;EAAA,QACHN,WAAW;AAAA;AAAAsC,EAAA,GADxBhC,gBAAgB;AAiEtB,eAAeA,gBAAgB;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}