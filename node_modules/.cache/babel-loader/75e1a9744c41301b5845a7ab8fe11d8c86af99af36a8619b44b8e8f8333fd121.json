{"ast":null,"code":"var _jsxFileName = \"/Users/widhardwiatmoko/Desktop/TerpantauAman/realtime-client/src/components/UserInfoPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useNavigate, useLocation } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserInfoPage = () => {\n  _s();\n  var _location$state, _location$state2, _location$state3;\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  // Retrieve values from previous steps\n  const dimensions = ((_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.dimensions) || [];\n  const metric = ((_location$state2 = location.state) === null || _location$state2 === void 0 ? void 0 : _location$state2.metric) || null;\n  const refreshTime = ((_location$state3 = location.state) === null || _location$state3 === void 0 ? void 0 : _location$state3.refreshTime) || \"\";\n  const [reportName, setUserName] = useState(\"\"); // State for user's name\n\n  const [queryResults, setQueryResults] = useState(null);\n  const handleSubmit = async () => {\n    if (reportName.trim() === \"\") {\n      // Basic validation (check for empty name)\n      alert(\"Please enter your name.\");\n      return;\n    }\n    try {\n      const res = await fetch(\"http://localhost:3001/query-bigquery\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          dimensions,\n          metric,\n          refreshTime\n        })\n      });\n      const datas = await res.json();\n      setQueryResults(datas);\n\n      // const dataToSend = {\n      //   dimensions,\n      //   metric,\n      //   refreshTime,\n      //   reportName,\n      // };\n      console.log(queryResults);\n      // Send data to backend to be saved to GCS\n      const response = await fetch(\"http://localhost:3001/save-to-gcs\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(queryResults)\n        // body: JSON.stringify(dataToSend),\n      });\n      const data = await response.json();\n      console.log(data); // Log the response from the server (optional)\n\n      // After saving, you can navigate to the FinalPage or elsewhere\n      navigate(\"/confirmation\", {\n        state: location.state\n      });\n    } catch (error) {\n      console.error(\"Error saving data:\", error);\n      // Handle the error (e.g., display an error message to the user)\n    }\n  };\n\n  //   const handleSubmit = () => {\n  //     if (userName.trim() === \"\") {\n  //       // Basic validation (check for empty name)\n  //       alert(\"Please enter your name.\");\n  //       return;\n  //     }\n\n  //     // Pass all collected data to the final page\n  //     // navigate(\"/final\", {\n  //     //   state: {\n  //     //     section1Values,\n  //     //     section2Value,\n  //     //     userName,\n  //     //   },\n  //     // });\n  //     navigate(\"/confirmation\", {\n  //       state: {\n  //         section1Values: location.state.section1Values,\n  //         section2Value: location.state.section2Value,\n  //         section3Value: location.state.section3Value,\n  //         userName, // Include userName from this page\n  //       },\n  //     });\n\n  //     // navigate(\"/confirmation\", { state: location.state }); // Pass the state along\n  //   };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"User Information\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"reportName\",\n      children: \"Enter your name:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      id: \"reportName\",\n      value: reportName,\n      onChange: e => setUserName(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSubmit,\n      children: \"Proceed to Results\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n};\n_s(UserInfoPage, \"Tx8as0Mv+WeP5X6B7nMwf7r9ySU=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = UserInfoPage;\nexport default UserInfoPage;\nvar _c;\n$RefreshReg$(_c, \"UserInfoPage\");","map":{"version":3,"names":["React","useState","useNavigate","useLocation","jsxDEV","_jsxDEV","UserInfoPage","_s","_location$state","_location$state2","_location$state3","navigate","location","dimensions","state","metric","refreshTime","reportName","setUserName","queryResults","setQueryResults","handleSubmit","trim","alert","res","fetch","method","headers","body","JSON","stringify","datas","json","console","log","response","data","error","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","type","id","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["/Users/widhardwiatmoko/Desktop/TerpantauAman/realtime-client/src/components/UserInfoPage.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { useNavigate, useLocation } from \"react-router-dom\";\n\nconst UserInfoPage = () => {\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  // Retrieve values from previous steps\n  const dimensions = location.state?.dimensions || [];\n  const metric = location.state?.metric || null;\n  const refreshTime = location.state?.refreshTime || \"\";\n\n  const [reportName, setUserName] = useState(\"\"); // State for user's name\n\n  const [queryResults, setQueryResults] = useState(null);\n\n  const handleSubmit = async () => {\n    if (reportName.trim() === \"\") {\n      // Basic validation (check for empty name)\n      alert(\"Please enter your name.\");\n      return;\n    }\n    try {\n      const res = await fetch(\"http://localhost:3001/query-bigquery\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          dimensions,\n          metric,\n          refreshTime,\n        }),\n      });\n      const datas = await res.json();\n      setQueryResults(datas);\n\n      // const dataToSend = {\n      //   dimensions,\n      //   metric,\n      //   refreshTime,\n      //   reportName,\n      // };\n      console.log(queryResults);\n      // Send data to backend to be saved to GCS\n      const response = await fetch(\"http://localhost:3001/save-to-gcs\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(queryResults),\n        // body: JSON.stringify(dataToSend),\n      });\n\n      const data = await response.json();\n      console.log(data); // Log the response from the server (optional)\n\n      // After saving, you can navigate to the FinalPage or elsewhere\n      navigate(\"/confirmation\", { state: location.state });\n    } catch (error) {\n      console.error(\"Error saving data:\", error);\n      // Handle the error (e.g., display an error message to the user)\n    }\n  };\n\n  //   const handleSubmit = () => {\n  //     if (userName.trim() === \"\") {\n  //       // Basic validation (check for empty name)\n  //       alert(\"Please enter your name.\");\n  //       return;\n  //     }\n\n  //     // Pass all collected data to the final page\n  //     // navigate(\"/final\", {\n  //     //   state: {\n  //     //     section1Values,\n  //     //     section2Value,\n  //     //     userName,\n  //     //   },\n  //     // });\n  //     navigate(\"/confirmation\", {\n  //       state: {\n  //         section1Values: location.state.section1Values,\n  //         section2Value: location.state.section2Value,\n  //         section3Value: location.state.section3Value,\n  //         userName, // Include userName from this page\n  //       },\n  //     });\n\n  //     // navigate(\"/confirmation\", { state: location.state }); // Pass the state along\n  //   };\n\n  return (\n    <div>\n      <h1>User Information</h1>\n      <label htmlFor=\"reportName\">Enter your name:</label>\n      <input\n        type=\"text\"\n        id=\"reportName\"\n        value={reportName}\n        onChange={(e) => setUserName(e.target.value)}\n      />\n      <button onClick={handleSubmit}>Proceed to Results</button>\n    </div>\n  );\n};\n\nexport default UserInfoPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}